// Code generated by itr_gen, DO NOT EDIT.
package iterator

import (
	"github.com/csgura/fp"
)

func Flap3[A1, A2, A3, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, R]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Iterator[R]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Iterator[R]]] {
		return Flap2(Ap(tf, Of(a1)))
	}
}

func Method3[A1, A2, A3, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3) R) func(A2, A3) fp.Iterator[R] {
	return func(a2 A2, a3 A3) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3)
		})
	}
}

func Flap4[A1, A2, A3, A4, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, R]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Iterator[R]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Iterator[R]]]] {
		return Flap3(Ap(tf, Of(a1)))
	}
}

func Method4[A1, A2, A3, A4, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4) R) func(A2, A3, A4) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4)
		})
	}
}

func Flap5[A1, A2, A3, A4, A5, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, R]]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Iterator[R]]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Iterator[R]]]]] {
		return Flap4(Ap(tf, Of(a1)))
	}
}

func Method5[A1, A2, A3, A4, A5, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) R) func(A2, A3, A4, A5) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4, a5 A5) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4, a5)
		})
	}
}

func Flap6[A1, A2, A3, A4, A5, A6, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, R]]]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Iterator[R]]]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Iterator[R]]]]]] {
		return Flap5(Ap(tf, Of(a1)))
	}
}

func Method6[A1, A2, A3, A4, A5, A6, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6) R) func(A2, A3, A4, A5, A6) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4, a5 A5, a6 A6) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4, a5, a6)
		})
	}
}

func Flap7[A1, A2, A3, A4, A5, A6, A7, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, R]]]]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Iterator[R]]]]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Iterator[R]]]]]]] {
		return Flap6(Ap(tf, Of(a1)))
	}
}

func Method7[A1, A2, A3, A4, A5, A6, A7, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7) R) func(A2, A3, A4, A5, A6, A7) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4, a5, a6, a7)
		})
	}
}

func Flap8[A1, A2, A3, A4, A5, A6, A7, A8, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, R]]]]]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, fp.Iterator[R]]]]]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, fp.Iterator[R]]]]]]]] {
		return Flap7(Ap(tf, Of(a1)))
	}
}

func Method8[A1, A2, A3, A4, A5, A6, A7, A8, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8) R) func(A2, A3, A4, A5, A6, A7, A8) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4, a5, a6, a7, a8)
		})
	}
}

func Flap9[A1, A2, A3, A4, A5, A6, A7, A8, A9, R any](tf fp.Iterator[fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, fp.Func1[A9, R]]]]]]]]]]) fp.Func1[A1, fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, fp.Func1[A9, fp.Iterator[R]]]]]]]]]] {
	return func(a1 A1) fp.Func1[A2, fp.Func1[A3, fp.Func1[A4, fp.Func1[A5, fp.Func1[A6, fp.Func1[A7, fp.Func1[A8, fp.Func1[A9, fp.Iterator[R]]]]]]]]] {
		return Flap8(Ap(tf, Of(a1)))
	}
}

func Method9[A1, A2, A3, A4, A5, A6, A7, A8, A9, R any](ta1 fp.Iterator[A1], fa1 func(a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9) R) func(A2, A3, A4, A5, A6, A7, A8, A9) fp.Iterator[R] {
	return func(a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9) fp.Iterator[R] {
		return Map(ta1, func(a1 A1) R {
			return fa1(a1, a2, a3, a4, a5, a6, a7, a8, a9)
		})
	}
}
