// Code generated by template_gen, DO NOT EDIT.
package product

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/hlist"
)

// generated by product_op.go:64

func Tuple3[A1, A2, A3 any](a1 A1, a2 A2, a3 A3) fp.Tuple3[A1, A2, A3] {
	return fp.Tuple3[A1, A2, A3]{
		I1: a1,
		I2: a2,
		I3: a3,
	}
}

func Tuple4[A1, A2, A3, A4 any](a1 A1, a2 A2, a3 A3, a4 A4) fp.Tuple4[A1, A2, A3, A4] {
	return fp.Tuple4[A1, A2, A3, A4]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
	}
}

func Tuple5[A1, A2, A3, A4, A5 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5) fp.Tuple5[A1, A2, A3, A4, A5] {
	return fp.Tuple5[A1, A2, A3, A4, A5]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
		I5: a5,
	}
}

func Tuple6[A1, A2, A3, A4, A5, A6 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6) fp.Tuple6[A1, A2, A3, A4, A5, A6] {
	return fp.Tuple6[A1, A2, A3, A4, A5, A6]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
		I5: a5,
		I6: a6,
	}
}

func Tuple7[A1, A2, A3, A4, A5, A6, A7 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7) fp.Tuple7[A1, A2, A3, A4, A5, A6, A7] {
	return fp.Tuple7[A1, A2, A3, A4, A5, A6, A7]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
		I5: a5,
		I6: a6,
		I7: a7,
	}
}

func Tuple8[A1, A2, A3, A4, A5, A6, A7, A8 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8) fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8] {
	return fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
		I5: a5,
		I6: a6,
		I7: a7,
		I8: a8,
	}
}

func Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9) fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9] {
	return fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9]{
		I1: a1,
		I2: a2,
		I3: a3,
		I4: a4,
		I5: a5,
		I6: a6,
		I7: a7,
		I8: a8,
		I9: a9,
	}
}

func Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10) fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] {
	return fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
	}
}

func Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11) fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] {
	return fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
	}
}

func Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12) fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] {
	return fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
	}
}

func Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13) fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] {
	return fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
	}
}

func Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14) fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] {
	return fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
	}
}

func Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15) fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] {
	return fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
	}
}

func Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16) fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] {
	return fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
	}
}

func Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16, a17 A17) fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] {
	return fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
		I17: a17,
	}
}

func Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16, a17 A17, a18 A18) fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] {
	return fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
		I17: a17,
		I18: a18,
	}
}

func Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16, a17 A17, a18 A18, a19 A19) fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] {
	return fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
		I17: a17,
		I18: a18,
		I19: a19,
	}
}

func Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16, a17 A17, a18 A18, a19 A19, a20 A20) fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] {
	return fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
		I17: a17,
		I18: a18,
		I19: a19,
		I20: a20,
	}
}

func Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21 any](a1 A1, a2 A2, a3 A3, a4 A4, a5 A5, a6 A6, a7 A7, a8 A8, a9 A9, a10 A10, a11 A11, a12 A12, a13 A13, a14 A14, a15 A15, a16 A16, a17 A17, a18 A18, a19 A19, a20 A20, a21 A21) fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] {
	return fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]{
		I1:  a1,
		I2:  a2,
		I3:  a3,
		I4:  a4,
		I5:  a5,
		I6:  a6,
		I7:  a7,
		I8:  a8,
		I9:  a9,
		I10: a10,
		I11: a11,
		I12: a12,
		I13: a13,
		I14: a14,
		I15: a15,
		I16: a16,
		I17: a17,
		I18: a18,
		I19: a19,
		I20: a20,
		I21: a21,
	}
}

// generated by product_op.go:85

func TupleFromHList2[A1, A2 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Nil]]) fp.Tuple2[A1, A2] {
	tail := TupleFromHList1(hlist.Tail(list))
	return Tuple2(list.Head(), tail.I1)
}

func TupleFromHList3[A1, A2, A3 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Nil]]]) fp.Tuple3[A1, A2, A3] {
	tail := TupleFromHList2(hlist.Tail(list))
	return Tuple3(list.Head(), tail.I1, tail.I2)
}

func TupleFromHList4[A1, A2, A3, A4 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Nil]]]]) fp.Tuple4[A1, A2, A3, A4] {
	tail := TupleFromHList3(hlist.Tail(list))
	return Tuple4(list.Head(), tail.I1, tail.I2, tail.I3)
}

func TupleFromHList5[A1, A2, A3, A4, A5 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Nil]]]]]) fp.Tuple5[A1, A2, A3, A4, A5] {
	tail := TupleFromHList4(hlist.Tail(list))
	return Tuple5(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4)
}

func TupleFromHList6[A1, A2, A3, A4, A5, A6 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Nil]]]]]]) fp.Tuple6[A1, A2, A3, A4, A5, A6] {
	tail := TupleFromHList5(hlist.Tail(list))
	return Tuple6(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5)
}

func TupleFromHList7[A1, A2, A3, A4, A5, A6, A7 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Nil]]]]]]]) fp.Tuple7[A1, A2, A3, A4, A5, A6, A7] {
	tail := TupleFromHList6(hlist.Tail(list))
	return Tuple7(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6)
}

func TupleFromHList8[A1, A2, A3, A4, A5, A6, A7, A8 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Nil]]]]]]]]) fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8] {
	tail := TupleFromHList7(hlist.Tail(list))
	return Tuple8(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7)
}

func TupleFromHList9[A1, A2, A3, A4, A5, A6, A7, A8, A9 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Nil]]]]]]]]]) fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9] {
	tail := TupleFromHList8(hlist.Tail(list))
	return Tuple9(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8)
}

func TupleFromHList10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Nil]]]]]]]]]]) fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] {
	tail := TupleFromHList9(hlist.Tail(list))
	return Tuple10(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9)
}

func TupleFromHList11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Nil]]]]]]]]]]]) fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] {
	tail := TupleFromHList10(hlist.Tail(list))
	return Tuple11(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10)
}

func TupleFromHList12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Nil]]]]]]]]]]]]) fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] {
	tail := TupleFromHList11(hlist.Tail(list))
	return Tuple12(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11)
}

func TupleFromHList13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Nil]]]]]]]]]]]]]) fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] {
	tail := TupleFromHList12(hlist.Tail(list))
	return Tuple13(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12)
}

func TupleFromHList14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Nil]]]]]]]]]]]]]]) fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] {
	tail := TupleFromHList13(hlist.Tail(list))
	return Tuple14(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13)
}

func TupleFromHList15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Nil]]]]]]]]]]]]]]]) fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] {
	tail := TupleFromHList14(hlist.Tail(list))
	return Tuple15(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14)
}

func TupleFromHList16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Nil]]]]]]]]]]]]]]]]) fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] {
	tail := TupleFromHList15(hlist.Tail(list))
	return Tuple16(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15)
}

func TupleFromHList17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Nil]]]]]]]]]]]]]]]]]) fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] {
	tail := TupleFromHList16(hlist.Tail(list))
	return Tuple17(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16)
}

func TupleFromHList18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Nil]]]]]]]]]]]]]]]]]]) fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] {
	tail := TupleFromHList17(hlist.Tail(list))
	return Tuple18(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17)
}

func TupleFromHList19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Nil]]]]]]]]]]]]]]]]]]]) fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] {
	tail := TupleFromHList18(hlist.Tail(list))
	return Tuple19(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18)
}

func TupleFromHList20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Cons[A20, hlist.Nil]]]]]]]]]]]]]]]]]]]]) fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] {
	tail := TupleFromHList19(hlist.Tail(list))
	return Tuple20(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19)
}

func TupleFromHList21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21 any](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Cons[A20, hlist.Cons[A21, hlist.Nil]]]]]]]]]]]]]]]]]]]]]) fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] {
	tail := TupleFromHList20(hlist.Tail(list))
	return Tuple21(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19, tail.I20)
}

// generated by product_op.go:103

func Flatten4[A1, A2, A3, A4 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, A4]]]) fp.Tuple4[A1, A2, A3, A4] {
	tail := Flatten3(list.Tail())
	return Tuple4(list.Head(), tail.I1, tail.I2, tail.I3)
}

func Flatten5[A1, A2, A3, A4, A5 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, A5]]]]) fp.Tuple5[A1, A2, A3, A4, A5] {
	tail := Flatten4(list.Tail())
	return Tuple5(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4)
}

func Flatten6[A1, A2, A3, A4, A5, A6 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, A6]]]]]) fp.Tuple6[A1, A2, A3, A4, A5, A6] {
	tail := Flatten5(list.Tail())
	return Tuple6(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5)
}

func Flatten7[A1, A2, A3, A4, A5, A6, A7 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, A7]]]]]]) fp.Tuple7[A1, A2, A3, A4, A5, A6, A7] {
	tail := Flatten6(list.Tail())
	return Tuple7(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6)
}

func Flatten8[A1, A2, A3, A4, A5, A6, A7, A8 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, A8]]]]]]]) fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8] {
	tail := Flatten7(list.Tail())
	return Tuple8(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7)
}

func Flatten9[A1, A2, A3, A4, A5, A6, A7, A8, A9 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, A9]]]]]]]]) fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9] {
	tail := Flatten8(list.Tail())
	return Tuple9(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8)
}

func Flatten10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, A10]]]]]]]]]) fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] {
	tail := Flatten9(list.Tail())
	return Tuple10(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9)
}

func Flatten11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, A11]]]]]]]]]]) fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] {
	tail := Flatten10(list.Tail())
	return Tuple11(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10)
}

func Flatten12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, A12]]]]]]]]]]]) fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] {
	tail := Flatten11(list.Tail())
	return Tuple12(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11)
}

func Flatten13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, A13]]]]]]]]]]]]) fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] {
	tail := Flatten12(list.Tail())
	return Tuple13(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12)
}

func Flatten14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, A14]]]]]]]]]]]]]) fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] {
	tail := Flatten13(list.Tail())
	return Tuple14(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13)
}

func Flatten15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, A15]]]]]]]]]]]]]]) fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] {
	tail := Flatten14(list.Tail())
	return Tuple15(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14)
}

func Flatten16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, A16]]]]]]]]]]]]]]]) fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] {
	tail := Flatten15(list.Tail())
	return Tuple16(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15)
}

func Flatten17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, fp.Tuple2[A16, A17]]]]]]]]]]]]]]]]) fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] {
	tail := Flatten16(list.Tail())
	return Tuple17(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16)
}

func Flatten18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, fp.Tuple2[A16, fp.Tuple2[A17, A18]]]]]]]]]]]]]]]]]) fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] {
	tail := Flatten17(list.Tail())
	return Tuple18(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17)
}

func Flatten19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, fp.Tuple2[A16, fp.Tuple2[A17, fp.Tuple2[A18, A19]]]]]]]]]]]]]]]]]]) fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] {
	tail := Flatten18(list.Tail())
	return Tuple19(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18)
}

func Flatten20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, fp.Tuple2[A16, fp.Tuple2[A17, fp.Tuple2[A18, fp.Tuple2[A19, A20]]]]]]]]]]]]]]]]]]]) fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] {
	tail := Flatten19(list.Tail())
	return Tuple20(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19)
}

func Flatten21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21 any](list fp.Tuple2[A1, fp.Tuple2[A2, fp.Tuple2[A3, fp.Tuple2[A4, fp.Tuple2[A5, fp.Tuple2[A6, fp.Tuple2[A7, fp.Tuple2[A8, fp.Tuple2[A9, fp.Tuple2[A10, fp.Tuple2[A11, fp.Tuple2[A12, fp.Tuple2[A13, fp.Tuple2[A14, fp.Tuple2[A15, fp.Tuple2[A16, fp.Tuple2[A17, fp.Tuple2[A18, fp.Tuple2[A19, fp.Tuple2[A20, A21]]]]]]]]]]]]]]]]]]]]) fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] {
	tail := Flatten20(list.Tail())
	return Tuple21(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19, tail.I20)
}

// generated by product_op.go:123

func LabelledFromHList2[A1, A2 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Nil]]) fp.Labelled2[A1, A2] {
	tail := LabelledFromHList1(hlist.Tail(list))
	return as.Labelled2(list.Head(), tail.I1)
}

func LabelledFromHList3[A1, A2, A3 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Nil]]]) fp.Labelled3[A1, A2, A3] {
	tail := LabelledFromHList2(hlist.Tail(list))
	return as.Labelled3(list.Head(), tail.I1, tail.I2)
}

func LabelledFromHList4[A1, A2, A3, A4 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Nil]]]]) fp.Labelled4[A1, A2, A3, A4] {
	tail := LabelledFromHList3(hlist.Tail(list))
	return as.Labelled4(list.Head(), tail.I1, tail.I2, tail.I3)
}

func LabelledFromHList5[A1, A2, A3, A4, A5 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Nil]]]]]) fp.Labelled5[A1, A2, A3, A4, A5] {
	tail := LabelledFromHList4(hlist.Tail(list))
	return as.Labelled5(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4)
}

func LabelledFromHList6[A1, A2, A3, A4, A5, A6 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Nil]]]]]]) fp.Labelled6[A1, A2, A3, A4, A5, A6] {
	tail := LabelledFromHList5(hlist.Tail(list))
	return as.Labelled6(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5)
}

func LabelledFromHList7[A1, A2, A3, A4, A5, A6, A7 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Nil]]]]]]]) fp.Labelled7[A1, A2, A3, A4, A5, A6, A7] {
	tail := LabelledFromHList6(hlist.Tail(list))
	return as.Labelled7(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6)
}

func LabelledFromHList8[A1, A2, A3, A4, A5, A6, A7, A8 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Nil]]]]]]]]) fp.Labelled8[A1, A2, A3, A4, A5, A6, A7, A8] {
	tail := LabelledFromHList7(hlist.Tail(list))
	return as.Labelled8(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7)
}

func LabelledFromHList9[A1, A2, A3, A4, A5, A6, A7, A8, A9 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Nil]]]]]]]]]) fp.Labelled9[A1, A2, A3, A4, A5, A6, A7, A8, A9] {
	tail := LabelledFromHList8(hlist.Tail(list))
	return as.Labelled9(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8)
}

func LabelledFromHList10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Nil]]]]]]]]]]) fp.Labelled10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10] {
	tail := LabelledFromHList9(hlist.Tail(list))
	return as.Labelled10(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9)
}

func LabelledFromHList11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Nil]]]]]]]]]]]) fp.Labelled11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11] {
	tail := LabelledFromHList10(hlist.Tail(list))
	return as.Labelled11(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10)
}

func LabelledFromHList12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Nil]]]]]]]]]]]]) fp.Labelled12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12] {
	tail := LabelledFromHList11(hlist.Tail(list))
	return as.Labelled12(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11)
}

func LabelledFromHList13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Nil]]]]]]]]]]]]]) fp.Labelled13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13] {
	tail := LabelledFromHList12(hlist.Tail(list))
	return as.Labelled13(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12)
}

func LabelledFromHList14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Nil]]]]]]]]]]]]]]) fp.Labelled14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14] {
	tail := LabelledFromHList13(hlist.Tail(list))
	return as.Labelled14(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13)
}

func LabelledFromHList15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Nil]]]]]]]]]]]]]]]) fp.Labelled15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15] {
	tail := LabelledFromHList14(hlist.Tail(list))
	return as.Labelled15(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14)
}

func LabelledFromHList16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Nil]]]]]]]]]]]]]]]]) fp.Labelled16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16] {
	tail := LabelledFromHList15(hlist.Tail(list))
	return as.Labelled16(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15)
}

func LabelledFromHList17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Nil]]]]]]]]]]]]]]]]]) fp.Labelled17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17] {
	tail := LabelledFromHList16(hlist.Tail(list))
	return as.Labelled17(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16)
}

func LabelledFromHList18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Nil]]]]]]]]]]]]]]]]]]) fp.Labelled18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18] {
	tail := LabelledFromHList17(hlist.Tail(list))
	return as.Labelled18(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17)
}

func LabelledFromHList19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Nil]]]]]]]]]]]]]]]]]]]) fp.Labelled19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19] {
	tail := LabelledFromHList18(hlist.Tail(list))
	return as.Labelled19(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18)
}

func LabelledFromHList20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Cons[A20, hlist.Nil]]]]]]]]]]]]]]]]]]]]) fp.Labelled20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20] {
	tail := LabelledFromHList19(hlist.Tail(list))
	return as.Labelled20(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19)
}

func LabelledFromHList21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21 fp.Named](list hlist.Cons[A1, hlist.Cons[A2, hlist.Cons[A3, hlist.Cons[A4, hlist.Cons[A5, hlist.Cons[A6, hlist.Cons[A7, hlist.Cons[A8, hlist.Cons[A9, hlist.Cons[A10, hlist.Cons[A11, hlist.Cons[A12, hlist.Cons[A13, hlist.Cons[A14, hlist.Cons[A15, hlist.Cons[A16, hlist.Cons[A17, hlist.Cons[A18, hlist.Cons[A19, hlist.Cons[A20, hlist.Cons[A21, hlist.Nil]]]]]]]]]]]]]]]]]]]]]) fp.Labelled21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21] {
	tail := LabelledFromHList20(hlist.Tail(list))
	return as.Labelled21(list.Head(), tail.I1, tail.I2, tail.I3, tail.I4, tail.I5, tail.I6, tail.I7, tail.I8, tail.I9, tail.I10, tail.I11, tail.I12, tail.I13, tail.I14, tail.I15, tail.I16, tail.I17, tail.I18, tail.I19, tail.I20)
}

// generated by product_op.go:141

func Lift2[A1, A2, R any](f func(A1, A2) R) func(fp.Tuple2[A1, A2]) R {
	return func(t fp.Tuple2[A1, A2]) R {
		return f(t.Unapply())
	}
}

func Lift3[A1, A2, A3, R any](f func(A1, A2, A3) R) func(fp.Tuple3[A1, A2, A3]) R {
	return func(t fp.Tuple3[A1, A2, A3]) R {
		return f(t.Unapply())
	}
}

func Lift4[A1, A2, A3, A4, R any](f func(A1, A2, A3, A4) R) func(fp.Tuple4[A1, A2, A3, A4]) R {
	return func(t fp.Tuple4[A1, A2, A3, A4]) R {
		return f(t.Unapply())
	}
}

func Lift5[A1, A2, A3, A4, A5, R any](f func(A1, A2, A3, A4, A5) R) func(fp.Tuple5[A1, A2, A3, A4, A5]) R {
	return func(t fp.Tuple5[A1, A2, A3, A4, A5]) R {
		return f(t.Unapply())
	}
}

func Lift6[A1, A2, A3, A4, A5, A6, R any](f func(A1, A2, A3, A4, A5, A6) R) func(fp.Tuple6[A1, A2, A3, A4, A5, A6]) R {
	return func(t fp.Tuple6[A1, A2, A3, A4, A5, A6]) R {
		return f(t.Unapply())
	}
}

func Lift7[A1, A2, A3, A4, A5, A6, A7, R any](f func(A1, A2, A3, A4, A5, A6, A7) R) func(fp.Tuple7[A1, A2, A3, A4, A5, A6, A7]) R {
	return func(t fp.Tuple7[A1, A2, A3, A4, A5, A6, A7]) R {
		return f(t.Unapply())
	}
}

func Lift8[A1, A2, A3, A4, A5, A6, A7, A8, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8) R) func(fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8]) R {
	return func(t fp.Tuple8[A1, A2, A3, A4, A5, A6, A7, A8]) R {
		return f(t.Unapply())
	}
}

func Lift9[A1, A2, A3, A4, A5, A6, A7, A8, A9, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9) R) func(fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9]) R {
	return func(t fp.Tuple9[A1, A2, A3, A4, A5, A6, A7, A8, A9]) R {
		return f(t.Unapply())
	}
}

func Lift10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) R) func(fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]) R {
	return func(t fp.Tuple10[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]) R {
		return f(t.Unapply())
	}
}

func Lift11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) R) func(fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]) R {
	return func(t fp.Tuple11[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]) R {
		return f(t.Unapply())
	}
}

func Lift12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) R) func(fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]) R {
	return func(t fp.Tuple12[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]) R {
		return f(t.Unapply())
	}
}

func Lift13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) R) func(fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]) R {
	return func(t fp.Tuple13[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]) R {
		return f(t.Unapply())
	}
}

func Lift14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) R) func(fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]) R {
	return func(t fp.Tuple14[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]) R {
		return f(t.Unapply())
	}
}

func Lift15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) R) func(fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]) R {
	return func(t fp.Tuple15[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]) R {
		return f(t.Unapply())
	}
}

func Lift16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) R) func(fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]) R {
	return func(t fp.Tuple16[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]) R {
		return f(t.Unapply())
	}
}

func Lift17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) R) func(fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]) R {
	return func(t fp.Tuple17[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]) R {
		return f(t.Unapply())
	}
}

func Lift18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) R) func(fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]) R {
	return func(t fp.Tuple18[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]) R {
		return f(t.Unapply())
	}
}

func Lift19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) R) func(fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]) R {
	return func(t fp.Tuple19[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]) R {
		return f(t.Unapply())
	}
}

func Lift20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) R) func(fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]) R {
	return func(t fp.Tuple20[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]) R {
		return f(t.Unapply())
	}
}

func Lift21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, R any](f func(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) R) func(fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]) R {
	return func(t fp.Tuple21[A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]) R {
		return f(t.Unapply())
	}
}
