// Code generated by gombok, DO NOT EDIT.
package state

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/product"
)

func Map[S any, A any, R any](m fp.State[S, A], f func(A) R) fp.State[S, R] {
	return FlatMap(m, fp.Compose2(f, Pure[S, R]))
}

func Replace[S any, A any, R any](s fp.State[S, A], b R) fp.State[S, R] {
	return Map(s, fp.Const[A](b))
}

func Map2[S any, A any, B, R any](first fp.State[S, A], second fp.State[S, B], fab func(A, B) R) fp.State[S, R] {
	return FlatMap(first, func(a A) fp.State[S, R] {
		return Map(second, func(b B) R {
			return fab(a, b)
		})
	})
}

func Zip[S any, A any, B any](first fp.State[S, A], second fp.State[S, B]) fp.State[S, fp.Tuple2[A, B]] {
	return Map2(first, second, product.Tuple2)
}

func Ap[S any, A any, B any](tfab fp.State[S, fp.Func1[A, B]], ta fp.State[S, A]) fp.State[S, B] {
	return FlatMap(tfab, func(fab fp.Func1[A, B]) fp.State[S, B] {
		return Map(ta, fab)
	})
}
