// Code generated by monad_gen, DO NOT EDIT.
package try

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/seq"
)

func PureSeqT[A any](a A) fp.Try[fp.Seq[A]] {
	return Pure(seq.Pure[A](a))
}

func LiftSeqT[A any](a fp.Try[A]) fp.Try[fp.Seq[A]] {
	return Map(a, seq.Pure[A])
}

func MapSeqT[A any, B any](t fp.Try[fp.Seq[A]], f func(A) B) fp.Try[fp.Seq[B]] {
	return Map(t, func(ma fp.Seq[A]) fp.Seq[B] {
		return seq.FlatMap[A, B](ma, func(a A) fp.Seq[B] {
			return seq.Pure[B](f(a))
		})
	})
}

func SubFlatMapSeqT[A any, B any](t fp.Try[fp.Seq[A]], f func(A) fp.Seq[B]) fp.Try[fp.Seq[B]] {
	return Map(t, func(ma fp.Seq[A]) fp.Seq[B] {
		return seq.FlatMap[A, B](ma, func(a A) fp.Seq[B] {
			return f(a)
		})
	})
}

func TraverseSeqT[A any, B any](t fp.Try[fp.Seq[A]], f func(A) fp.Try[B]) fp.Try[fp.Seq[B]] {
	sequencef := func(v fp.Seq[fp.Try[B]]) fp.Try[fp.Seq[B]] {
		return Map(Sequence(v), as.Seq)
	}
	return FlatMap(MapSeqT(t, f), sequencef)
}

func FlatMapSeqT[A any, B any](t fp.Try[fp.Seq[A]], f func(A) fp.Try[fp.Seq[B]]) fp.Try[fp.Seq[B]] {

	flatten := func(v fp.Seq[fp.Seq[B]]) fp.Seq[B] {
		return seq.FlatMap[fp.Seq[B], B](v, fp.Id)
	}

	return Map(TraverseSeqT(t, f), flatten)

}
