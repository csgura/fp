package main

import (
	"fmt"
	"os"

	"github.com/csgura/fp/genfp"
	"github.com/csgura/fp/genfp/generator"
	"golang.org/x/tools/go/packages"
)

func main() {
	pack := os.Getenv("GOPACKAGE")

	cwd, _ := os.Getwd()

	cfg := &packages.Config{
		Mode: packages.NeedTypes | packages.NeedImports | packages.NeedTypesInfo | packages.NeedSyntax | packages.NeedModule,
	}

	pkgs, err := packages.Load(cfg, cwd)
	if err != nil {
		fmt.Println(err)
		return
	}

	genseq := generator.FindGenerateFromUntil(pkgs, "@internal.Generate")
	genlist := generator.FindGenerateFromList(pkgs, "@internal.Generate")

	filelist := map[string]bool{}
	for file := range genseq {
		filelist[file] = true
	}

	for file := range genlist {
		filelist[file] = true
	}

	for file := range filelist {
		genfp.Generate(pack, file, func(w genfp.Writer) {
			for _, gfu := range genseq[file] {
				for _, im := range gfu.Imports {
					w.GetImportedName(genfp.NewImportPackage(im.Package, im.Name))
				}

				params := map[string]any{}
				for k, v := range gfu.Parameters {
					if k != "N" {
						params[k] = v
					}
				}

				fmt.Fprintf(w, "// generated by %s:%d\n", gfu.Decl.File, gfu.Decl.Line)
				w.Iteration(gfu.From, gfu.Until).Write(gfu.Template, params)
			}
			for _, gfu := range genlist[file] {

				for _, im := range gfu.Imports {
					w.GetImportedName(genfp.NewImportPackage(im.Package, im.Name))
				}

				fmt.Fprintf(w, "// generated by %s:%d\n", gfu.Decl.File, gfu.Decl.Line)
				for _, v := range gfu.List {
					params := map[string]any{
						"N": v,
					}
					for k, v := range gfu.Parameters {
						if k != "N" {
							params[k] = v
						}
					}
					w.Render(gfu.Template, map[string]any{}, params)
				}
			}
		})
	}

}
