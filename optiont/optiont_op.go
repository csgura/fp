// Code generated by monad_gen, DO NOT EDIT.
package optiont

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/option"
	"github.com/csgura/fp/try"
)

func Pure[A any](a A) fp.OptionT[A] {
	return try.Success[fp.Option[A]](option.Pure[A](a))
}

func LiftT[A any](a fp.Try[A]) fp.OptionT[A] {
	return try.Map(a, option.Pure[A])
}

func Map[A any, B any](t fp.OptionT[A], f func(A) B) fp.OptionT[B] {
	return try.Map(t, func(ma fp.Option[A]) fp.Option[B] {
		return option.FlatMap[A, B](ma, func(a A) fp.Option[B] {
			return option.Pure[B](f(a))
		})
	})
}

func SubFlatMap[A any, B any](t fp.OptionT[A], f func(A) fp.Option[B]) fp.OptionT[B] {
	return try.Map(t, func(ma fp.Option[A]) fp.Option[B] {
		return option.FlatMap[A, B](ma, func(a A) fp.Option[B] {
			return f(a)
		})
	})
}

func MapT[A any, B any](t fp.OptionT[A], f func(A) fp.Try[B]) fp.OptionT[B] {
	sequencef := func(v fp.Option[fp.Try[B]]) fp.OptionT[B] {
		if v.IsDefined() {
			return try.Map(v.Get(), option.Some)
		}
		return try.Success(fp.Option[B]{})
	}
	return try.FlatMap(Map(t, f), sequencef)
}

func FlatMap[A any, B any](t fp.OptionT[A], f func(A) fp.OptionT[B]) fp.OptionT[B] {

	flatten := func(v fp.Option[fp.Option[B]]) fp.Option[B] {
		return option.FlatMap[fp.Option[B], B](v, fp.Id)
	}

	return try.Map(MapT(t, f), flatten)

}

func Filter[T any](optionT fp.OptionT[T], p func(v T) bool) fp.Try[fp.Option[T]] {
	return try.Map(optionT, func(insideValue fp.Option[T]) fp.Option[T] {
		return fp.Option[T].Filter(insideValue, p)
	})
}

func OrElse[T any](optionT fp.OptionT[T], t T) fp.Try[T] {
	return try.Map(optionT, func(insideValue fp.Option[T]) T {
		return fp.Option[T].OrElse(insideValue, t)
	})
}

func OrZero[T any](optionT fp.OptionT[T]) fp.Try[T] {
	return try.Map(optionT, func(insideValue fp.Option[T]) T {
		return fp.Option[T].OrZero(insideValue)
	})
}

func OrElseGet[T any](optionT fp.OptionT[T], f func() T) fp.Try[T] {
	return try.Map(optionT, func(insideValue fp.Option[T]) T {
		return fp.Option[T].OrElseGet(insideValue, f)
	})
}

func Or[T any](optionT fp.OptionT[T], f func() fp.Option[T]) fp.Try[fp.Option[T]] {
	return try.Map(optionT, func(insideValue fp.Option[T]) fp.Option[T] {
		return fp.Option[T].Or(insideValue, f)
	})
}

func OrOption[T any](optionT fp.OptionT[T], v fp.Option[T]) fp.Try[fp.Option[T]] {
	return try.Map(optionT, func(insideValue fp.Option[T]) fp.Option[T] {
		return fp.Option[T].OrOption(insideValue, v)
	})
}

func OrPtr[T any](optionT fp.OptionT[T], v *T) fp.Try[fp.Option[T]] {
	return try.Map(optionT, func(insideValue fp.Option[T]) fp.Option[T] {
		return fp.Option[T].OrPtr(insideValue, v)
	})
}

func Recover[T any](optionT fp.OptionT[T], f func() T) fp.Try[fp.Option[T]] {
	return try.Map(optionT, func(insideValue fp.Option[T]) fp.Option[T] {
		return fp.Option[T].Recover(insideValue, f)
	})
}
