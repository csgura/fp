// Code generated by gombok, DO NOT EDIT.
package clonetest

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
)

type ValueStructBuilder ValueStruct

type ValueStructMutable struct {
	Hello string
	World int
}

func (r ValueStructBuilder) Build() ValueStruct {
	return ValueStruct(r)
}

func (r ValueStruct) Builder() ValueStructBuilder {
	return ValueStructBuilder(r)
}

func (r ValueStruct) Hello() string {
	return r.hello
}

func (r ValueStruct) World() int {
	return r.world
}

func (r ValueStruct) WithHello(v string) ValueStruct {
	r.hello = v
	return r
}

func (r ValueStructBuilder) Hello(v string) ValueStructBuilder {
	r.hello = v
	return r
}

func (r ValueStruct) WithWorld(v int) ValueStruct {
	r.world = v
	return r
}

func (r ValueStructBuilder) World(v int) ValueStructBuilder {
	r.world = v
	return r
}

func (r ValueStruct) String() string {
	return fmt.Sprintf("ValueStruct(hello=%v, world=%v)", r.hello, r.world)
}

func (r ValueStruct) AsTuple() fp.Tuple2[string, int] {
	return as.Tuple2(r.hello, r.world)
}

func (r ValueStruct) Unapply() (string, int) {
	return r.hello, r.world
}

func (r ValueStruct) AsMutable() ValueStructMutable {
	return ValueStructMutable{
		Hello: r.hello,
		World: r.world,
	}
}

func (r ValueStructMutable) AsImmutable() ValueStruct {
	return ValueStruct{
		hello: r.Hello,
		world: r.World,
	}
}

func (r ValueStructBuilder) FromTuple(t fp.Tuple2[string, int]) ValueStructBuilder {
	r.hello = t.I1
	r.world = t.I2
	return r
}

func (r ValueStructBuilder) Apply(hello string, world int) ValueStructBuilder {
	r.hello = hello
	r.world = world
	return r
}

func (r ValueStruct) AsMap() map[string]any {
	m := map[string]any{}
	m["hello"] = r.hello
	m["world"] = r.world
	return m
}

func (r ValueStructBuilder) FromMap(m map[string]any) ValueStructBuilder {

	if v, ok := m["hello"].(string); ok {
		r.hello = v
	}

	if v, ok := m["world"].(int); ok {
		r.world = v
	}

	return r
}

type CloneStructBuilder CloneStruct

type CloneStructMutable struct {
	Hello string
	World int
}

func (r CloneStructBuilder) Build() CloneStruct {
	return CloneStruct(r)
}

func (r CloneStruct) Builder() CloneStructBuilder {
	return CloneStructBuilder(r)
}

func (r CloneStruct) Hello() string {
	return r.hello
}

func (r CloneStruct) World() int {
	return r.world
}

func (r CloneStruct) WithHello(v string) CloneStruct {
	r.hello = v
	return r
}

func (r CloneStructBuilder) Hello(v string) CloneStructBuilder {
	r.hello = v
	return r
}

func (r CloneStruct) WithWorld(v int) CloneStruct {
	r.world = v
	return r
}

func (r CloneStructBuilder) World(v int) CloneStructBuilder {
	r.world = v
	return r
}

func (r CloneStruct) String() string {
	return fmt.Sprintf("CloneStruct(hello=%v, world=%v)", r.hello, r.world)
}

func (r CloneStruct) AsTuple() fp.Tuple2[string, int] {
	return as.Tuple2(r.hello, r.world)
}

func (r CloneStruct) Unapply() (string, int) {
	return r.hello, r.world
}

func (r CloneStruct) AsMutable() CloneStructMutable {
	return CloneStructMutable{
		Hello: r.hello,
		World: r.world,
	}
}

func (r CloneStructMutable) AsImmutable() CloneStruct {
	return CloneStruct{
		hello: r.Hello,
		world: r.World,
	}
}

func (r CloneStructBuilder) FromTuple(t fp.Tuple2[string, int]) CloneStructBuilder {
	r.hello = t.I1
	r.world = t.I2
	return r
}

func (r CloneStructBuilder) Apply(hello string, world int) CloneStructBuilder {
	r.hello = hello
	r.world = world
	return r
}

func (r CloneStruct) AsMap() map[string]any {
	m := map[string]any{}
	m["hello"] = r.hello
	m["world"] = r.world
	return m
}

func (r CloneStructBuilder) FromMap(m map[string]any) CloneStructBuilder {

	if v, ok := m["hello"].(string); ok {
		r.hello = v
	}

	if v, ok := m["world"].(int); ok {
		r.world = v
	}

	return r
}
