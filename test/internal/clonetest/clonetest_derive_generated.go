// Code generated by gombok, DO NOT EDIT.
package clonetest

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/clone"
	"github.com/csgura/fp/lazy"
	"github.com/csgura/fp/product"
	"time"
)

func CloneCloneStruct() fp.Clone[CloneStruct] {
	return clone.Generic(
		as.Generic(
			"clonetest.CloneStruct",
			"Struct",
			CloneStruct.AsTuple,
			fp.Compose(
				as.Curried2(CloneStructBuilder.FromTuple)(CloneStructBuilder{}),
				CloneStructBuilder.Build,
			),
		),
		clone.Tuple2(clone.Given[string](), clone.Given[int]()),
	)
}

func CloneHasReference() fp.Clone[HasReference] {
	return clone.Generic(
		as.Generic(
			"clonetest.HasReference",
			"Struct",
			func(v HasReference) fp.Tuple8[*string, []int, map[string]int, RecursiveDerive, time.Time, MySeq, ValueStruct, CloneStruct] {
				return as.Tuple8(v.A, v.S, v.M, v.RD, v.T, v.MS, v.VS, v.CS)
			},
			func(t fp.Tuple8[*string, []int, map[string]int, RecursiveDerive, time.Time, MySeq, ValueStruct, CloneStruct]) HasReference {
				return HasReference{
					A:  t.I1,
					S:  t.I2,
					M:  t.I3,
					RD: t.I4,
					T:  t.I5,
					MS: t.I6,
					VS: t.I7,
					CS: t.I8,
				}
			},
		),
		clone.Tuple8(clone.Ptr(lazy.Call(func() fp.Clone[string] {
			return clone.Given[string]()
		})), clone.Slice(clone.Given[int]()), clone.GoMap(clone.Given[string](), clone.Given[int]()), CloneRecursiveDerive(), clone.Given[time.Time](), CloneMySeq(), CloneValueStruct(), CloneCloneStruct()),
	)
}

func CloneRecursiveDerive() fp.Clone[RecursiveDerive] {
	return clone.Generic(
		as.Generic(
			"clonetest.RecursiveDerive",
			"Struct",
			fp.Compose(
				func(v RecursiveDerive) fp.Tuple1[[]string] {
					return as.Tuple1(v.S)
				},
				as.HList1,
			),

			fp.Compose(
				product.TupleFromHList1,
				func(t fp.Tuple1[[]string]) RecursiveDerive {
					return RecursiveDerive{
						S: t.I1,
					}
				},
			),
		),
		clone.HCons(
			clone.Slice(clone.Given[string]()),
			clone.HNil,
		),
	)
}

func CloneMySeq() fp.Clone[MySeq] {
	return clone.Generic(
		as.Generic(
			"clonetest.MySeq",
			"NewType",
			func(v MySeq) []string {
				return []string(v)
			},
			func(v []string) MySeq {
				return MySeq(v)
			},
		),
		clone.Slice(clone.Given[string]()),
	)
}

func CloneValueStruct() fp.Clone[ValueStruct] {
	return clone.Generic(
		as.Generic(
			"clonetest.ValueStruct",
			"Struct",
			ValueStruct.AsTuple,
			fp.Compose(
				as.Curried2(ValueStructBuilder.FromTuple)(ValueStructBuilder{}),
				ValueStructBuilder.Build,
			),
		),
		clone.Tuple2(clone.Given[string](), clone.Given[int]()),
	)
}
