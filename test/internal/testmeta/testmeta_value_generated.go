// Code generated by gombok, DO NOT EDIT.
package testmeta

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
)

func (r Person) Name() string {
	return r.name
}

func (r Person) Age() int {
	return r.age
}

func (r Person) WithName(v string) Person {
	r.name = v
	return r
}

func (r Person) WithAge(v int) Person {
	r.age = v
	return r
}

func (r Person) String() string {
	return fmt.Sprintf("testmeta.Person{name:%v, age:%v}", r.name, r.age)
}

func (r Person) AsTuple() fp.Tuple2[string, int] {
	return as.Tuple2(r.name, r.age)
}

func (r Person) Unapply() (string, int) {
	return r.name, r.age
}

func (r Person) AsMap() map[string]any {
	m := map[string]any{}
	m["name"] = r.name
	m["age"] = r.age
	return m
}

type PersonBuilder Person

func (r PersonBuilder) Build() Person {
	return Person(r)
}

func (r Person) Builder() PersonBuilder {
	return PersonBuilder(r)
}

func (r PersonBuilder) Name(v string) PersonBuilder {
	r.name = v
	return r
}

func (r PersonBuilder) Age(v int) PersonBuilder {
	r.age = v
	return r
}

func (r PersonBuilder) FromTuple(t fp.Tuple2[string, int]) PersonBuilder {
	r.name = t.I1
	r.age = t.I2
	return r
}

func (r PersonBuilder) Apply(name string, age int) PersonBuilder {
	r.name = name
	r.age = age
	return r
}

func (r PersonBuilder) FromMap(m map[string]any) PersonBuilder {

	if v, ok := m["name"].(string); ok {
		r.name = v
	}

	if v, ok := m["age"].(int); ok {
		r.age = v
	}

	return r
}

type PersonMutable struct {
	Name string
	Age  int
}

func (r Person) AsMutable() PersonMutable {
	return PersonMutable{
		Name: r.name,
		Age:  r.age,
	}
}

func (r PersonMutable) AsImmutable() Person {
	return Person{
		name: r.Name,
		age:  r.Age,
	}
}
