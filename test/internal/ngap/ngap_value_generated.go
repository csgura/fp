// Code generated by gombok, DO NOT EDIT.
package ngap

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
)

func (r NgapValue) Present() int {
	return r.present
}

func (r NgapValue) First() *int {
	return r.first
}

func (r NgapValue) Second() *string {
	return r.second
}

func (r NgapValue) Third() *float64 {
	return r.third
}

func (r NgapValue) WithPresent(v int) NgapValue {
	r.present = v
	return r
}

func (r NgapValue) WithFirst(v *int) NgapValue {
	r.first = v
	return r
}

func (r NgapValue) WithSecond(v *string) NgapValue {
	r.second = v
	return r
}

func (r NgapValue) WithThird(v *float64) NgapValue {
	r.third = v
	return r
}

func (r NgapValue) String() string {
	return fmt.Sprintf("ngap.NgapValue{present:%v, first:%v, second:%v, third:%v}", r.present, r.first, r.second, r.third)
}

func (r NgapValue) AsTuple() fp.Tuple4[int, *int, *string, *float64] {
	return as.Tuple4(r.present, r.first, r.second, r.third)
}

func (r NgapValue) Unapply() (int, *int, *string, *float64) {
	return r.present, r.first, r.second, r.third
}

func (r NgapValue) AsMap() map[string]any {
	m := map[string]any{}
	m["present"] = r.present
	m["first"] = r.first
	m["second"] = r.second
	m["third"] = r.third
	return m
}

type NamedPresentOfNgapValue[T any] fp.Tuple1[T]

func (r NamedPresentOfNgapValue[T]) Name() string {
	return "present"
}
func (r NamedPresentOfNgapValue[T]) Value() T {
	return r.I1
}
func (r NamedPresentOfNgapValue[T]) Tag() string {
	return ``
}
func (r NamedPresentOfNgapValue[T]) Static() bool {
	return true
}
func (r NamedPresentOfNgapValue[T]) WithValue(v T) NamedPresentOfNgapValue[T] {
	r.I1 = v
	return r
}

type NamedFirstOfNgapValue[T any] fp.Tuple1[T]

func (r NamedFirstOfNgapValue[T]) Name() string {
	return "first"
}
func (r NamedFirstOfNgapValue[T]) Value() T {
	return r.I1
}
func (r NamedFirstOfNgapValue[T]) Tag() string {
	return `aper:"id=20"`
}
func (r NamedFirstOfNgapValue[T]) Static() bool {
	return true
}
func (r NamedFirstOfNgapValue[T]) WithValue(v T) NamedFirstOfNgapValue[T] {
	r.I1 = v
	return r
}

type NamedSecondOfNgapValue[T any] fp.Tuple1[T]

func (r NamedSecondOfNgapValue[T]) Name() string {
	return "second"
}
func (r NamedSecondOfNgapValue[T]) Value() T {
	return r.I1
}
func (r NamedSecondOfNgapValue[T]) Tag() string {
	return `aper:"id=30"`
}
func (r NamedSecondOfNgapValue[T]) Static() bool {
	return true
}
func (r NamedSecondOfNgapValue[T]) WithValue(v T) NamedSecondOfNgapValue[T] {
	r.I1 = v
	return r
}

type NamedThirdOfNgapValue[T any] fp.Tuple1[T]

func (r NamedThirdOfNgapValue[T]) Name() string {
	return "third"
}
func (r NamedThirdOfNgapValue[T]) Value() T {
	return r.I1
}
func (r NamedThirdOfNgapValue[T]) Tag() string {
	return `aper:"id=40"`
}
func (r NamedThirdOfNgapValue[T]) Static() bool {
	return true
}
func (r NamedThirdOfNgapValue[T]) WithValue(v T) NamedThirdOfNgapValue[T] {
	r.I1 = v
	return r
}

func (r NgapValue) AsLabelled() fp.Labelled4[NamedPresentOfNgapValue[int], NamedFirstOfNgapValue[*int], NamedSecondOfNgapValue[*string], NamedThirdOfNgapValue[*float64]] {
	return as.Labelled4(NamedPresentOfNgapValue[int]{r.present}, NamedFirstOfNgapValue[*int]{r.first}, NamedSecondOfNgapValue[*string]{r.second}, NamedThirdOfNgapValue[*float64]{r.third})
}

type NgapValueBuilder NgapValue

func (r NgapValueBuilder) Build() NgapValue {
	return NgapValue(r)
}

func (r NgapValue) Builder() NgapValueBuilder {
	return NgapValueBuilder(r)
}

func (r NgapValueBuilder) Present(v int) NgapValueBuilder {
	r.present = v
	return r
}

func (r NgapValueBuilder) First(v *int) NgapValueBuilder {
	r.first = v
	return r
}

func (r NgapValueBuilder) Second(v *string) NgapValueBuilder {
	r.second = v
	return r
}

func (r NgapValueBuilder) Third(v *float64) NgapValueBuilder {
	r.third = v
	return r
}

func (r NgapValueBuilder) FromTuple(t fp.Tuple4[int, *int, *string, *float64]) NgapValueBuilder {
	r.present = t.I1
	r.first = t.I2
	r.second = t.I3
	r.third = t.I4
	return r
}

func (r NgapValueBuilder) Apply(present int, first *int, second *string, third *float64) NgapValueBuilder {
	r.present = present
	r.first = first
	r.second = second
	r.third = third
	return r
}

func (r NgapValueBuilder) FromMap(m map[string]any) NgapValueBuilder {

	if v, ok := m["present"].(int); ok {
		r.present = v
	}

	if v, ok := m["first"].(*int); ok {
		r.first = v
	}

	if v, ok := m["second"].(*string); ok {
		r.second = v
	}

	if v, ok := m["third"].(*float64); ok {
		r.third = v
	}

	return r
}

func (r NgapValueBuilder) FromLabelled(t fp.Labelled4[NamedPresentOfNgapValue[int], NamedFirstOfNgapValue[*int], NamedSecondOfNgapValue[*string], NamedThirdOfNgapValue[*float64]]) NgapValueBuilder {
	r.present = t.I1.Value()
	r.first = t.I2.Value()
	r.second = t.I3.Value()
	r.third = t.I4.Value()
	return r
}

type NgapValueMutable struct {
	Present int
	First   *int     `aper:"id=20"`
	Second  *string  `aper:"id=30"`
	Third   *float64 `aper:"id=40"`
}

func (r NgapValue) AsMutable() NgapValueMutable {
	return NgapValueMutable{
		Present: r.present,
		First:   r.first,
		Second:  r.second,
		Third:   r.third,
	}
}

func (r NgapValueMutable) AsImmutable() NgapValue {
	return NgapValue{
		present: r.Present,
		first:   r.First,
		second:  r.Second,
		third:   r.Third,
	}
}
