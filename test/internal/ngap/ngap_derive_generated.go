// Code generated by gombok, DO NOT EDIT.
package ngap

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/hlist"
)

func SplitTagNgapValue() SplitTag[NgapValue] {
	return SplitTagContraMap(
		HConsLabelled(
			NamedInt[NamedPresentOfNgapValue](),
			HConsLabelled(
				NamedPtr[NamedFirstOfNgapValue, int](),
				HConsLabelled(
					NamedPtr[NamedSecondOfNgapValue, string](),
					HConsLabelled(
						NamedPtr[NamedThirdOfNgapValue, float64](),
						HNil,
					),
				),
			),
		),
		func(v NgapValue) hlist.Cons[NamedPresentOfNgapValue, hlist.Cons[NamedFirstOfNgapValue, hlist.Cons[NamedSecondOfNgapValue, hlist.Cons[NamedThirdOfNgapValue, hlist.Nil]]]] {
			i0, i1, i2, i3 := v.Unapply()
			return hlist.Concat(NamedPresentOfNgapValue{i0},
				hlist.Concat(NamedFirstOfNgapValue{i1},
					hlist.Concat(NamedSecondOfNgapValue{i2},
						hlist.Concat(NamedThirdOfNgapValue{i3},
							hlist.Empty(),
						),
					),
				),
			)
		},
	)
}

func SplitNgapType() Split[NgapType] {
	return IMap(
		Tuple4[int, string, float64](),
		func(t fp.Tuple4[int, *int, *string, *float64]) NgapType {
			return NgapType{
				Present: t.I1,
				First:   t.I2,
				Second:  t.I3,
				Third:   t.I4,
			}
		},
		func(v NgapType) fp.Tuple4[int, *int, *string, *float64] {
			return fp.Tuple4[int, *int, *string, *float64]{
				I1: v.Present,
				I2: v.First,
				I3: v.Second,
				I4: v.Third,
			}
		},
	)
}

func SplitTagNgapType() SplitTag[NgapType] {
	return SplitTagContraMap(
		HConsLabelled(
			NamedInt[fp.RuntimeNamed[int]](),
			HConsLabelled(
				NamedPtr[fp.RuntimeNamed[*int], int](),
				HConsLabelled(
					NamedPtr[fp.RuntimeNamed[*string], string](),
					HConsLabelled(
						NamedPtr[fp.RuntimeNamed[*float64], float64](),
						HNil,
					),
				),
			),
		),
		func(v NgapType) hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[*int], hlist.Cons[fp.RuntimeNamed[*string], hlist.Cons[fp.RuntimeNamed[*float64], hlist.Nil]]]] {
			i0, i1, i2, i3 := v.Present, v.First, v.Second, v.Third
			return hlist.Concat(as.NamedWithTag("Present", i0, ``),
				hlist.Concat(as.NamedWithTag("First", i1, `aper:"id=20"`),
					hlist.Concat(as.NamedWithTag("Second", i2, `aper:"id=30"`),
						hlist.Concat(as.NamedWithTag("Third", i3, `aper:"id=40"`),
							hlist.Empty(),
						),
					),
				),
			)
		},
	)
}
