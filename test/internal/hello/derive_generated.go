// Code generated by gombok, DO NOT EDIT.
package hello

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hlist"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/read"
	"github.com/csgura/fp/test/internal/show"
	"time"
)

var EqWorld = eq.ContraMap(
	eq.Tuple2(eq.String, eq.Given[time.Time]()),
	World.AsTuple,
)

var EncoderWorld = js.EncoderContraMap(
	js.EncoderLabelled2(js.EncoderNamed[NameIsMessage[string]](js.EncoderString), js.EncoderNamed[NameIsTimestamp[time.Time]](js.EncoderTime)),
	World.AsLabelled,
)

var DecoderWorld = js.DecoderMap(
	js.DecoderLabelled2(js.DecoderNamed[NameIsMessage[string]](js.DecoderString), js.DecoderNamed[NameIsTimestamp[time.Time]](js.DecoderTime)),
	fp.Compose(
		as.Curried2(WorldBuilder.FromLabelled)(WorldBuilder{}),
		WorldBuilder.Build,
	),
)

var ShowWorld = show.Generic(
	as.Generic(
		"hello.World",
		fp.Compose(
			World.AsTuple,
			as.HList2[string, time.Time],
		),

		fp.Compose(
			as.Func2(
				hlist.Case2[string, time.Time, hlist.Nil, fp.Tuple2[string, time.Time]],
			).ApplyLast(
				as.Tuple2[string, time.Time],
			),
			fp.Compose(
				as.Curried2(WorldBuilder.FromTuple)(WorldBuilder{}),
				WorldBuilder.Build,
			),
		),
	),
	show.HCons(
		show.String,
		show.HCons(
			show.Time,
			show.HNil,
		),
	),
)

var EncoderHasOption = js.EncoderContraMap(
	js.EncoderHConsLabelled(
		js.EncoderNamed[NameIsMessage[string]](js.EncoderString),
		js.EncoderHConsLabelled(
			js.EncoderNamed[NameIsAddr[fp.Option[string]]](js.EncoderOption(js.EncoderString)),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NameIsPhone[[]string]](js.EncoderSlice(js.EncoderString)),
				js.EncoderHConsLabelled(
					js.EncoderNamed[NameIsEmptySeq[[]int]](js.EncoderSlice(js.EncoderNumber[int]())),
					js.EncoderHNil,
				),
			),
		),
	),
	fp.Compose(
		HasOption.AsLabelled,
		as.HList4Labelled[NameIsMessage[string], NameIsAddr[fp.Option[string]], NameIsPhone[[]string], NameIsEmptySeq[[]int]],
	),
)

var EqAliasedStruct = eq.ContraMap(
	eq.Tuple2(eq.String, eq.Given[time.Time]()),
	AliasedStruct.AsTuple,
)

var ShowHListInsideHList = show.Generic(
	as.Generic(
		"hello.HListInsideHList",
		fp.Compose(
			HListInsideHList.AsTuple,
			as.HList3[fp.Tuple2[string, int], string, World],
		),

		fp.Compose(
			as.Func2(
				hlist.Case3[fp.Tuple2[string, int], string, World, hlist.Nil, fp.Tuple3[fp.Tuple2[string, int], string, World]],
			).ApplyLast(
				as.Tuple3[fp.Tuple2[string, int], string, World],
			),
			fp.Compose(
				as.Curried2(HListInsideHListBuilder.FromTuple)(HListInsideHListBuilder{}),
				HListInsideHListBuilder.Build,
			),
		),
	),
	show.HCons(
		show.Generic(as.Generic("", as.HList2[string, int], as.Func2(
			hlist.Case2[string, int, hlist.Nil, fp.Tuple2[string, int]],
		).ApplyLast(
			as.Tuple2[string, int],
		)), show.HCons(
			show.String,
			show.HCons(
				show.Given[int](),
				show.HNil,
			),
		)),
		show.HCons(
			show.String,
			show.HCons(
				ShowWorld,
				show.HNil,
			),
		),
	),
)

var ReadHListInsideHList = read.Generic(
	as.Generic(
		"hello.HListInsideHList",
		fp.Compose(
			HListInsideHList.AsTuple,
			as.HList3[fp.Tuple2[string, int], string, World],
		),

		fp.Compose(
			as.Func2(
				hlist.Case3[fp.Tuple2[string, int], string, World, hlist.Nil, fp.Tuple3[fp.Tuple2[string, int], string, World]],
			).ApplyLast(
				as.Tuple3[fp.Tuple2[string, int], string, World],
			),
			fp.Compose(
				as.Curried2(HListInsideHListBuilder.FromTuple)(HListInsideHListBuilder{}),
				HListInsideHListBuilder.Build,
			),
		),
	),
	read.HCons(
		read.Generic(as.Generic("", as.HList2[string, int], as.Func2(
			hlist.Case2[string, int, hlist.Nil, fp.Tuple2[string, int]],
		).ApplyLast(
			as.Tuple2[string, int],
		)), read.HCons(
			read.String,
			read.HCons(
				read.Int[int](),
				read.HNil,
			),
		)),
		read.HCons(
			read.String,
			read.HCons(
				ReadWorld,
				read.HNil,
			),
		),
	),
)

var ReadWorld = read.Generic(
	as.Generic(
		"hello.World",
		fp.Compose(
			World.AsTuple,
			as.HList2[string, time.Time],
		),

		fp.Compose(
			as.Func2(
				hlist.Case2[string, time.Time, hlist.Nil, fp.Tuple2[string, time.Time]],
			).ApplyLast(
				as.Tuple2[string, time.Time],
			),
			fp.Compose(
				as.Curried2(WorldBuilder.FromTuple)(WorldBuilder{}),
				WorldBuilder.Build,
			),
		),
	),
	read.HCons(
		read.String,
		read.HCons(
			read.Time,
			read.HNil,
		),
	),
)
