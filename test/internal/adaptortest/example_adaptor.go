// Code generated by gombok, DO NOT EDIT.
package adaptortest

import (
	"fmt"
)

// generated by adaptor_example.go:263
type SenderAdaptor struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderAdaptor) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	panic("SenderAdaptor.Send not implemented")
}

// generated by adaptor_example.go:274
type StatusAdaptor struct {
	IsActive       func() bool
	GetDisplayName func() string
}

func (r *StatusAdaptor) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	return false
}

func (r *StatusAdaptor) DisplayName() string {

	if r.GetDisplayName != nil {
		return r.GetDisplayName()
	}

	panic("StatusAdaptor.DisplayName not implemented")
}

// generated by adaptor_example.go:285
type HandlerAdaptor struct {
	OnReceiveEvent func(event string)
}

func (r *HandlerAdaptor) ReceiveEvent(event string) {

	if r.OnReceiveEvent != nil {
		r.OnReceiveEvent(event)
		return
	}

	panic("HandlerAdaptor.ReceiveEvent not implemented")
}

// generated by adaptor_example.go:291
type StatusAdaptorZero struct {
	IsActive       func() bool
	GetDisplayName func() string
}

func (r *StatusAdaptorZero) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	return false
}

func (r *StatusAdaptorZero) DisplayName() string {

	if r.GetDisplayName != nil {
		return r.GetDisplayName()
	}

	panic("StatusAdaptorZero.DisplayName not implemented")
}

// generated by adaptor_example.go:299
type StatusAdaptorVal struct {
	DefaultActive      bool
	DefaultDisplayName string
}

func (r *StatusAdaptorVal) Active() bool {
	return r.DefaultActive
}

func (r *StatusAdaptorVal) DisplayName() string {
	return r.DefaultDisplayName
}

// generated by adaptor_example.go:306
type StatusAdaptorValGetter struct {
	DefaultActive      bool
	IsActive           func() bool
	DefaultDisplayName string
	GetDisplayName     func() string
}

func (r *StatusAdaptorValGetter) Active() bool {

	var _zero bool
	if r.DefaultActive != _zero {
		return r.DefaultActive
	}

	if r.IsActive != nil {
		return r.IsActive()
	}

	panic("StatusAdaptorValGetter.Active not implemented")
}

func (r *StatusAdaptorValGetter) DisplayName() string {
	if r.DefaultDisplayName != "" {
		return r.DefaultDisplayName
	}

	if r.GetDisplayName != nil {
		return r.GetDisplayName()
	}

	panic("StatusAdaptorValGetter.DisplayName not implemented")
}

// generated by adaptor_example.go:314
type StatusAdaptorCustom struct {
	IsActive           func() bool
	DefaultDisplayName string
}

func (r *StatusAdaptorCustom) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	panic("StatusAdaptorCustom.Active not implemented")
}

func (r *StatusAdaptorCustom) DisplayName() string {
	if r.DefaultDisplayName != "" {
		return r.DefaultDisplayName
	}

	return func() string {
		return "Inactive"
	}()
}

// generated by adaptor_example.go:330
type HandlerCustom struct {
	OnReceiveEvent func(event string)
}

func (r *HandlerCustom) ReceiveEvent(event string) {

	if r.OnReceiveEvent != nil {
		r.OnReceiveEvent(event)
		return
	}

	func(v string) {
		fmt.Printf("receive event : %s\n", v)
	}(event)
}

// generated by adaptor_example.go:350
type SenderCustom struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderCustom) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return sendStdout(msg)
}

// generated by adaptor_example.go:362
type Sender42 struct {
	DoSend func(msg string) (int, error)
}

func (r *Sender42) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return 42, nil
}

// generated by adaptor_example.go:374
type SenderExtends struct {
	Extends Sender
	DoSend  func(msg string) (int, error)
}

func (r *SenderExtends) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	if r.Extends != nil {
		return r.Extends.Send(msg)
	}

	panic("SenderExtends.Send not implemented")
}

// generated by adaptor_example.go:381
type SenderExtendsSelf struct {
	Extends Sender
	DoSend  func(self Sender, msg string) (int, error)
}

func (r *SenderExtendsSelf) Send(msg string) (int, error) {
	return r.SendImpl(r, msg)
}

func (r *SenderExtendsSelf) SendImpl(self Sender, msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(self, msg)
	}

	if r.Extends != nil {
		type impl interface {
			SendImpl(self Sender, msg string) (int, error)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.SendImpl(self, msg)
		}

		return r.Extends.Send(msg)
	}

	panic("SenderExtendsSelf.Send not implemented")
}

// generated by adaptor_example.go:389
type SenderSelfArg struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderSelfArg) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return func(self Sender, msg string) (int, error) {
		return 0, nil
	}(r, msg)
}

// generated by adaptor_example.go:403
type SenderSelfSelfArg struct {
	Extends Sender
	DoSend  func(self Sender, msg string) (int, error)
}

func (r *SenderSelfSelfArg) Send(msg string) (int, error) {
	return r.SendImpl(r, msg)
}

func (r *SenderSelfSelfArg) SendImpl(self Sender, msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(self, msg)
	}

	if r.Extends != nil {
		type impl interface {
			SendImpl(self Sender, msg string) (int, error)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.SendImpl(self, msg)
		}

		return r.Extends.Send(msg)
	}

	return func(self Sender, msg string) (int, error) {
		return 0, nil
	}(self, msg)
}

// generated by adaptor_example.go:453
type InvokerAdaptor struct {
	DoInvoke func(a1 interface{})
}

func (r *InvokerAdaptor) Invoke(a1 interface{}) {

	if r.DoInvoke != nil {
		r.DoInvoke(a1)
		return
	}

	panic("InvokerAdaptor.Invoke not implemented")
}

// generated by adaptor_example.go:458
type InvokerCheckSelf struct {
	Extends  Invoker
	DoInvoke func(a1 interface{})
}

func (r *InvokerCheckSelf) Invoke(a1 interface{}) {
	r.InvokeImpl(r, a1)
}

func (r *InvokerCheckSelf) InvokeImpl(self Invoker, a1 interface{}) {

	if r.DoInvoke != nil {
		r.DoInvoke(a1)
		return
	}

	if r.Extends != nil {
		type impl interface {
			InvokeImpl(self Invoker, a1 interface{})
		}

		if super, ok := r.Extends.(impl); ok {
			super.InvokeImpl(self, a1)
			return
		}

		r.Extends.Invoke(a1)
		return
	}

	panic("InvokerCheckSelf.Invoke not implemented")
}

// generated by adaptor_example.go:468
type StringMakerAdaptor struct {
	Extends  StringMaker
	DoString func() string
}

func (r *StringMakerAdaptor) String() string {
	return r.StringImpl(r)
}

func (r *StringMakerAdaptor) StringImpl(self StringMaker) string {

	if r.DoString != nil {
		return r.DoString()
	}

	if r.Extends != nil {
		type impl interface {
			StringImpl(self StringMaker) string
		}

		if super, ok := r.Extends.(impl); ok {
			return super.StringImpl(self)
		}

		return r.Extends.String()
	}

	return func(self StringMaker) string {
		return "hello world"
	}(self)
}
