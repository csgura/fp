// Code generated by gombok, DO NOT EDIT.
package adaptortest

import (
	"fmt"
)

type SenderAdaptor struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderAdaptor) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	panic("SenderAdaptor.Send not implemented")
}

type StatusAdaptor struct {
	IsActive       func() bool
	GetDisplayName func() string
}

func (r *StatusAdaptor) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	return false
}

func (r *StatusAdaptor) DisplayName() string {

	if r.GetDisplayName != nil {
		return r.GetDisplayName()
	}

	panic("StatusAdaptor.DisplayName not implemented")
}

type HandlerAdaptor struct {
	OnReceiveEvent func(event string)
}

func (r *HandlerAdaptor) ReceiveEvent(event string) {

	if r.OnReceiveEvent != nil {
		r.OnReceiveEvent(event)
		return
	}

	panic("HandlerAdaptor.ReceiveEvent not implemented")
}

type StatusAdaptorZero struct {
	IsActive       func() bool
	GetDisplayName func() string
}

func (r *StatusAdaptorZero) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	return false
}

func (r *StatusAdaptorZero) DisplayName() string {

	if r.GetDisplayName != nil {
		return r.GetDisplayName()
	}

	panic("StatusAdaptorZero.DisplayName not implemented")
}

type StatusAdaptorVal struct {
	DefaultActive      bool
	DefaultDisplayName string
}

func (r *StatusAdaptorVal) Active() bool {
	return r.DefaultActive
}

func (r *StatusAdaptorVal) DisplayName() string {
	return r.DefaultDisplayName
}

type StatusAdaptorCustom struct {
	IsActive           func() bool
	DefaultDisplayName string
}

func (r *StatusAdaptorCustom) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	panic("StatusAdaptorCustom.Active not implemented")
}

func (r *StatusAdaptorCustom) DisplayName() string {
	if r.DefaultDisplayName != "" {
		return r.DefaultDisplayName
	}

	return func() string {
		return "Inactive"
	}()
}

type HandlerCustom struct {
	OnReceiveEvent func(event string)
}

func (r *HandlerCustom) ReceiveEvent(event string) {

	if r.OnReceiveEvent != nil {
		r.OnReceiveEvent(event)
		return
	}

	func(v string) {
		fmt.Printf("receive event : %s\n", v)
	}(event)
}

type SenderCustom struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderCustom) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return sendStdout(msg)
}

type Sender42 struct {
	DoSend func(msg string) (int, error)
}

func (r *Sender42) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return 42, nil
}

type SenderExtends struct {
	Extends Sender
	DoSend  func(msg string) (int, error)
}

func (r *SenderExtends) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	if r.Extends != nil {
		return r.Extends.Send(msg)
	}

	panic("SenderExtends.Send not implemented")
}

type SenderExtendsSelf struct {
	Extends Sender
	DoSend  func(self Sender, msg string) (int, error)
}

func (r *SenderExtendsSelf) Send(msg string) (int, error) {
	return r.SendImpl(r, msg)
}

func (r *SenderExtendsSelf) SendImpl(self Sender, msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(self, msg)
	}

	if r.Extends != nil {
		type impl interface {
			SendImpl(self Sender, msg string) (int, error)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.SendImpl(self, msg)
		}

		return r.Extends.Send(msg)
	}

	panic("SenderExtendsSelf.Send not implemented")
}

type SenderSelfArg struct {
	DoSend func(msg string) (int, error)
}

func (r *SenderSelfArg) Send(msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(msg)
	}

	return func(self Sender, msg string) (int, error) {
		return 0, nil
	}(r, msg)
}

type SenderSelfSelfArg struct {
	DoSend func(self Sender, msg string) (int, error)
}

func (r *SenderSelfSelfArg) Send(msg string) (int, error) {
	return r.SendImpl(r, msg)
}

func (r *SenderSelfSelfArg) SendImpl(self Sender, msg string) (int, error) {

	if r.DoSend != nil {
		return r.DoSend(self, msg)
	}

	return func(self Sender, msg string) (int, error) {
		return 0, nil
	}(self, msg)
}
