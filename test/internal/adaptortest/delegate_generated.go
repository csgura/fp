// Code generated by gombok, DO NOT EDIT.
package adaptortest

import (
	"context"
	"io"
	"time"
)

type SpanContextAdaptor struct {
	DefaultContext context.Context
	DoHello        func(self SpanContext) string
}

func (r *SpanContextAdaptor) Deadline() (time.Time, bool) {
	return r.DeadlineImpl(r)
}

func (r *SpanContextAdaptor) DeadlineImpl(self SpanContext) (time.Time, bool) {
	panic("SpanContextAdaptor.Deadline not implemented")
}

func (r *SpanContextAdaptor) Done() <-chan struct {
} {
	return r.DoneImpl(r)
}

func (r *SpanContextAdaptor) DoneImpl(self SpanContext) <-chan struct {
} {
	panic("SpanContextAdaptor.Done not implemented")
}

func (r *SpanContextAdaptor) Err() error {
	return r.ErrImpl(r)
}

func (r *SpanContextAdaptor) ErrImpl(self SpanContext) error {
	panic("SpanContextAdaptor.Err not implemented")
}

func (r *SpanContextAdaptor) Hello() string {
	return r.HelloImpl(r)
}

func (r *SpanContextAdaptor) HelloImpl(self SpanContext) string {

	if r.DoHello != nil {
		return r.DoHello(self)
	}

	panic("SpanContextAdaptor.Hello not implemented")
}

func (r *SpanContextAdaptor) Value(key any) any {
	return r.ValueImpl(r, key)
}

func (r *SpanContextAdaptor) ValueImpl(self SpanContext, key any) any {
	panic("SpanContextAdaptor.Value not implemented")
}

type SpanContextEmbedding struct {
	context.Context
	io.Closer
	DoHello func(self SpanContext) string
}

func (r *SpanContextEmbedding) Hello() string {
	return r.HelloImpl(r)
}

func (r *SpanContextEmbedding) HelloImpl(self SpanContext) string {

	if r.DoHello != nil {
		return r.DoHello(self)
	}

	panic("SpanContextEmbedding.Hello not implemented")
}

type SpanTrace struct {
	context.Context
	TracerImpl TracerImpl
	DoHello    func(self SpanContext) string
}

func (r *SpanTrace) Hello() string {
	return r.HelloImpl(r)
}

func (r *SpanTrace) HelloImpl(self SpanContext) string {

	if r.DoHello != nil {
		return r.DoHello(self)
	}

	panic("SpanTrace.Hello not implemented")
}

func (r *SpanTrace) Trace(message string) {
	r.TraceImpl(r, message)
}

func (r *SpanTrace) TraceImpl(self SpanContext, message string) {

}
