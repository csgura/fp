// Code generated by gombok, DO NOT EDIT.
package testjson

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
)

type RootBuilder Root

type RootMutable struct {
	A int
	B string
	C float64
	D bool
	E *int
	F []int
	G map[string]int
}

func (r RootBuilder) Build() Root {
	return Root(r)
}

func (r Root) Builder() RootBuilder {
	return RootBuilder(r)
}

func (r Root) A() int {
	return r.a
}

func (r Root) WithA(v int) Root {
	r.a = v
	return r
}

func (r RootBuilder) A(v int) RootBuilder {
	r.a = v
	return r
}

func (r Root) B() string {
	return r.b
}

func (r Root) WithB(v string) Root {
	r.b = v
	return r
}

func (r RootBuilder) B(v string) RootBuilder {
	r.b = v
	return r
}

func (r Root) C() float64 {
	return r.c
}

func (r Root) WithC(v float64) Root {
	r.c = v
	return r
}

func (r RootBuilder) C(v float64) RootBuilder {
	r.c = v
	return r
}

func (r Root) D() bool {
	return r.d
}

func (r Root) WithD(v bool) Root {
	r.d = v
	return r
}

func (r RootBuilder) D(v bool) RootBuilder {
	r.d = v
	return r
}

func (r Root) E() *int {
	return r.e
}

func (r Root) WithE(v *int) Root {
	r.e = v
	return r
}

func (r RootBuilder) E(v *int) RootBuilder {
	r.e = v
	return r
}

func (r Root) F() []int {
	return r.f
}

func (r Root) WithF(v []int) Root {
	r.f = v
	return r
}

func (r RootBuilder) F(v []int) RootBuilder {
	r.f = v
	return r
}

func (r Root) G() map[string]int {
	return r.g
}

func (r Root) WithG(v map[string]int) Root {
	r.g = v
	return r
}

func (r RootBuilder) G(v map[string]int) RootBuilder {
	r.g = v
	return r
}

func (r Root) String() string {
	return fmt.Sprintf("Root(a=%v, b=%v, c=%v, d=%v, e=%v, f=%v, g=%v)", r.a, r.b, r.c, r.d, r.e, r.f, r.g)
}

func (r Root) AsTuple() fp.Tuple7[int, string, float64, bool, *int, []int, map[string]int] {
	return as.Tuple7(r.a, r.b, r.c, r.d, r.e, r.f, r.g)
}

func (r Root) AsMutable() RootMutable {
	return RootMutable{
		A: r.a,
		B: r.b,
		C: r.c,
		D: r.d,
		E: r.e,
		F: r.f,
		G: r.g,
	}
}

func (r RootMutable) AsImmutable() Root {
	return Root{
		a: r.A,
		b: r.B,
		c: r.C,
		d: r.D,
		e: r.E,
		f: r.F,
		g: r.G,
	}
}

func (r RootBuilder) FromTuple(t fp.Tuple7[int, string, float64, bool, *int, []int, map[string]int]) RootBuilder {
	r.a = t.I1
	r.b = t.I2
	r.c = t.I3
	r.d = t.I4
	r.e = t.I5
	r.f = t.I6
	r.g = t.I7
	return r
}

func (r Root) AsMap() map[string]any {
	return map[string]any{
		"a": r.a,
		"b": r.b,
		"c": r.c,
		"d": r.d,
		"e": r.e,
		"f": r.f,
		"g": r.g,
	}
}

func (r RootBuilder) FromMap(m map[string]any) RootBuilder {

	if v, ok := m["a"].(int); ok {
		r.a = v
	}

	if v, ok := m["b"].(string); ok {
		r.b = v
	}

	if v, ok := m["c"].(float64); ok {
		r.c = v
	}

	if v, ok := m["d"].(bool); ok {
		r.d = v
	}

	if v, ok := m["e"].(*int); ok {
		r.e = v
	}

	if v, ok := m["f"].([]int); ok {
		r.f = v
	}

	if v, ok := m["g"].(map[string]int); ok {
		r.g = v
	}

	return r
}

func (r Root) AsLabelled() fp.Labelled7[NameIsA[int], NameIsB[string], NameIsC[float64], NameIsD[bool], NameIsE[*int], NameIsF[[]int], NameIsG[map[string]int]] {
	return as.Labelled7(NameIsA[int]{r.a}, NameIsB[string]{r.b}, NameIsC[float64]{r.c}, NameIsD[bool]{r.d}, NameIsE[*int]{r.e}, NameIsF[[]int]{r.f}, NameIsG[map[string]int]{r.g})
}

func (r RootBuilder) FromLabelled(t fp.Labelled7[NameIsA[int], NameIsB[string], NameIsC[float64], NameIsD[bool], NameIsE[*int], NameIsF[[]int], NameIsG[map[string]int]]) RootBuilder {
	r.a = t.I1.Value()
	r.b = t.I2.Value()
	r.c = t.I3.Value()
	r.d = t.I4.Value()
	r.e = t.I5.Value()
	r.f = t.I6.Value()
	r.g = t.I7.Value()
	return r
}

type NameIsA[T any] fp.Tuple1[T]

func (r NameIsA[T]) Name() string {
	return "a"
}
func (r NameIsA[T]) Value() T {
	return r.I1
}
func (r NameIsA[T]) WithValue(v T) NameIsA[T] {
	r.I1 = v
	return r
}

type NameIsB[T any] fp.Tuple1[T]

func (r NameIsB[T]) Name() string {
	return "b"
}
func (r NameIsB[T]) Value() T {
	return r.I1
}
func (r NameIsB[T]) WithValue(v T) NameIsB[T] {
	r.I1 = v
	return r
}

type NameIsC[T any] fp.Tuple1[T]

func (r NameIsC[T]) Name() string {
	return "c"
}
func (r NameIsC[T]) Value() T {
	return r.I1
}
func (r NameIsC[T]) WithValue(v T) NameIsC[T] {
	r.I1 = v
	return r
}

type NameIsD[T any] fp.Tuple1[T]

func (r NameIsD[T]) Name() string {
	return "d"
}
func (r NameIsD[T]) Value() T {
	return r.I1
}
func (r NameIsD[T]) WithValue(v T) NameIsD[T] {
	r.I1 = v
	return r
}

type NameIsE[T any] fp.Tuple1[T]

func (r NameIsE[T]) Name() string {
	return "e"
}
func (r NameIsE[T]) Value() T {
	return r.I1
}
func (r NameIsE[T]) WithValue(v T) NameIsE[T] {
	r.I1 = v
	return r
}

type NameIsF[T any] fp.Tuple1[T]

func (r NameIsF[T]) Name() string {
	return "f"
}
func (r NameIsF[T]) Value() T {
	return r.I1
}
func (r NameIsF[T]) WithValue(v T) NameIsF[T] {
	r.I1 = v
	return r
}

type NameIsG[T any] fp.Tuple1[T]

func (r NameIsG[T]) Name() string {
	return "g"
}
func (r NameIsG[T]) Value() T {
	return r.I1
}
func (r NameIsG[T]) WithValue(v T) NameIsG[T] {
	r.I1 = v
	return r
}
