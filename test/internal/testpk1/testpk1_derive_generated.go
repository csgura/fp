// Code generated by gombok, DO NOT EDIT.
package testpk1

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hlist"
	"github.com/csgura/fp/lazy"
	"github.com/csgura/fp/monoid"
	"github.com/csgura/fp/ord"
	"github.com/csgura/fp/product"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/read"
	"github.com/csgura/fp/test/internal/show"
	"time"
)

func EqWorld() fp.Eq[World] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.Time, eq.String),
		World.AsTuple,
	)
}

func EncoderWorld() js.Encoder[World] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[NamedMessageOfWorld](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NamedTimestampOfWorld](js.EncoderTime),
				js.EncoderHConsLabelled(
					js.EncoderNamed[PubNamedPubOfWorld](js.EncoderString),
					js.EncoderHNil,
				),
			),
		),
		func(v World) hlist.Cons[NamedMessageOfWorld, hlist.Cons[NamedTimestampOfWorld, hlist.Cons[PubNamedPubOfWorld, hlist.Nil]]] {
			i0, i1, i2 := v.Unapply()
			return hlist.Concat(NamedMessageOfWorld{i0},
				hlist.Concat(NamedTimestampOfWorld{i1},
					hlist.Concat(PubNamedPubOfWorld{i2},
						hlist.Empty(),
					),
				),
			)
		},
	)
}

func DecoderWorld() js.Decoder[World] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[NamedMessageOfWorld](js.DecoderString),
			js.DecoderHConsLabelled(
				js.DecoderNamed[NamedTimestampOfWorld](js.DecoderTime),
				js.DecoderHConsLabelled(
					js.DecoderNamed[PubNamedPubOfWorld](js.DecoderString),
					js.DecoderHNil,
				),
			),
		),
		func(hl0 hlist.Cons[NamedMessageOfWorld, hlist.Cons[NamedTimestampOfWorld, hlist.Cons[PubNamedPubOfWorld, hlist.Nil]]]) World {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2 := hlist.Head(hl2)
			return WorldBuilder{}.Apply(i0.Value(), i1.Value(), i2.Value()).Build()
		},
	)
}

func ShowWorld() fp.Show[World] {
	return show.Generic(
		fp.Generic[World, hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]]]{
			Type: "testpk1.World",
			Kind: "Struct",
			To: func(v World) hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]] {
				i0, i1, i2 := v.Unapply()
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]]) World {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return WorldBuilder{}.Apply(i0, i1, i2).Build()
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Time,
				show.StructHCons(
					show.String,
					show.HNil,
				),
			),
		),
	)
}

func EncoderHasOption() js.Encoder[HasOption] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[NamedMessageOfHasOption](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NamedAddrOfHasOption](js.EncoderOption(js.EncoderString)),
				js.EncoderHConsLabelled(
					js.EncoderNamed[NamedPhoneOfHasOption](js.EncoderSlice(js.EncoderString)),
					js.EncoderHConsLabelled(
						js.EncoderNamed[NamedEmptySeqOfHasOption](js.EncoderSlice(js.EncoderNumber[int]())),
						js.EncoderHNil,
					),
				),
			),
		),
		func(v HasOption) hlist.Cons[NamedMessageOfHasOption, hlist.Cons[NamedAddrOfHasOption, hlist.Cons[NamedPhoneOfHasOption, hlist.Cons[NamedEmptySeqOfHasOption, hlist.Nil]]]] {
			i0, i1, i2, i3 := v.Unapply()
			return hlist.Concat(NamedMessageOfHasOption{i0},
				hlist.Concat(NamedAddrOfHasOption{i1},
					hlist.Concat(NamedPhoneOfHasOption{i2},
						hlist.Concat(NamedEmptySeqOfHasOption{i3},
							hlist.Empty(),
						),
					),
				),
			)
		},
	)
}

func EqAliasedStruct() fp.Eq[AliasedStruct] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.Time, eq.String),
		AliasedStruct.AsTuple,
	)
}

func ShowHListInsideHList() fp.Show[HListInsideHList] {
	return show.Generic(
		fp.Generic[HListInsideHList, hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]]]{
			Type: "testpk1.HListInsideHList",
			Kind: "Struct",
			To: func(v HListInsideHList) hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]] {
				i0, i1, i2 := v.Unapply()
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]]) HListInsideHList {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return HListInsideHListBuilder{}.Apply(i0, i1, i2).Build()
			},
		},
		show.StructHCons(
			show.Generic(
				fp.Generic[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[int, hlist.Nil]]]{
					Type: "fp.Tuple2",
					Kind: "Tuple",
					To:   as.HList2[string, int],
					From: product.TupleFromHList2[string, int],
				},
				show.TupleHCons(
					show.String,
					show.TupleHCons(
						show.Int[int](),
						show.HNil,
					),
				),
			),
			show.StructHCons(
				show.String,
				show.StructHCons(
					ShowWorld(),
					show.HNil,
				),
			),
		),
	)
}

func ReadHListInsideHList() read.Read[HListInsideHList] {
	return read.Generic(
		fp.Generic[HListInsideHList, hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]]]{
			Type: "testpk1.HListInsideHList",
			Kind: "Struct",
			To: func(v HListInsideHList) hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]] {
				i0, i1, i2 := v.Unapply()
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[World, hlist.Nil]]]) HListInsideHList {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return HListInsideHListBuilder{}.Apply(i0, i1, i2).Build()
			},
		},
		read.TupleHCons(
			read.Generic(
				fp.Generic[fp.Tuple2[string, int], hlist.Cons[string, hlist.Cons[int, hlist.Nil]]]{
					Type: "fp.Tuple2",
					Kind: "Tuple",
					To:   as.HList2[string, int],
					From: product.TupleFromHList2[string, int],
				},
				read.TupleHCons(
					read.String,
					read.TupleHCons(
						read.Int[int](),
						read.TupleHNil,
					),
				),
			),
			read.TupleHCons(
				read.String,
				read.TupleHCons(
					ReadWorld(),
					read.TupleHNil,
				),
			),
		),
	)
}

func ReadWorld() read.Read[World] {
	return read.Generic(
		fp.Generic[World, hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]]]{
			Type: "testpk1.World",
			Kind: "Struct",
			To: func(v World) hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]] {
				i0, i1, i2 := v.Unapply()
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[time.Time, hlist.Cons[string, hlist.Nil]]]) World {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return WorldBuilder{}.Apply(i0, i1, i2).Build()
			},
		},
		read.TupleHCons(
			read.String,
			read.TupleHCons(
				read.Time,
				read.TupleHCons(
					read.String,
					read.TupleHNil,
				),
			),
		),
	)
}

func EqTestOrderedEq() fp.Eq[TestOrderedEq] {
	return eq.ContraMap(
		eq.Tuple2(EqSeq(eq.Given[int](), ord.Given[int]()), EqSeq(eq.Tuple2(eq.Given[int](), eq.Given[int]()), ord.Tuple2(ord.Given[int](), ord.Given[int]()))),
		TestOrderedEq.AsTuple,
	)
}

func EqMapEq() fp.Eq[MapEq] {
	return eq.ContraMap(
		eq.Tuple2(eq.GoMap[string](EqWorld()), eq.FpMap[string](EqWorld())),
		MapEq.AsTuple,
	)
}

func MonoidSeqMonoid() fp.Monoid[SeqMonoid] {
	return monoid.IMap(
		monoid.Tuple4(monoid.String, monoid.MergeSeq[string](), monoid.MergeGoMap[string, int](), monoid.MergeMap[string, World]()),
		fp.Compose(
			as.Curried2(SeqMonoidBuilder.FromTuple)(SeqMonoidBuilder{}),
			SeqMonoidBuilder.Build,
		),
		SeqMonoid.AsTuple,
	)
}

func EqMyInt() fp.Eq[MyInt] {
	return eq.ContraMap(
		eq.Given[int](),
		func(v MyInt) int {
			return int(v)
		},
	)
}

func EqMySeq[T any](eqT fp.Eq[T]) fp.Eq[MySeq[T]] {
	return eq.ContraMap(
		eq.Slice(eqT),
		func(v MySeq[T]) []T {
			return []T(v)
		},
	)
}

func MonoidMySeq[T any]() fp.Monoid[MySeq[T]] {
	return monoid.IMap(
		monoid.MergeSlice[T](),
		func(v []T) MySeq[T] {
			return MySeq[T](v)
		},
		func(v MySeq[T]) []T {
			return []T(v)
		},
	)
}

func EqMapEqParam[K any, V any](eqV fp.Eq[V]) fp.Eq[MapEqParam[K, V]] {
	return eq.ContraMap(
		eq.Tuple1(eq.FpMap[K](eqV)),
		MapEqParam[K, V].AsTuple,
	)
}

func EqNotUsedProblem() fp.Eq[NotUsedProblem] {
	return eq.ContraMap(
		eq.Tuple1(EqMapEqParam[string](eq.Given[int]())),
		NotUsedProblem.AsTuple,
	)
}

func EqNode() fp.Eq[Node] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.Ptr(lazy.Call(func() fp.Eq[Node] {
			return EqNode()
		})), eq.Ptr(lazy.Call(func() fp.Eq[Node] {
			return EqNode()
		}))),
		Node.AsTuple,
	)
}

func EqNoPrivate() fp.Eq[NoPrivate] {
	return eq.ContraMap(
		eq.Tuple1(eq.Given[int]()),
		NoPrivate.AsTuple,
	)
}

func EqOver21() fp.Eq[Over21] {
	return eq.ContraMap(
		eq.HCons(
			eq.Given[int](),
			eq.HCons(
				eq.Given[int](),
				eq.HCons(
					eq.Given[int](),
					eq.HCons(
						eq.Given[int](),
						eq.HCons(
							eq.Given[int](),
							eq.HCons(
								eq.Given[int](),
								eq.HCons(
									eq.Given[int](),
									eq.HCons(
										eq.Given[int](),
										eq.HCons(
											eq.Given[int](),
											eq.HCons(
												eq.Given[int](),
												eq.HCons(
													eq.Given[int](),
													eq.HCons(
														eq.Given[int](),
														eq.HCons(
															eq.Given[int](),
															eq.HCons(
																eq.Given[int](),
																eq.HCons(
																	eq.Given[int](),
																	eq.HCons(
																		eq.Given[int](),
																		eq.HCons(
																			eq.Given[int](),
																			eq.HCons(
																				eq.Given[int](),
																				eq.HCons(
																					eq.Given[int](),
																					eq.HCons(
																						eq.Given[int](),
																						eq.HCons(
																							eq.Given[int](),
																							eq.HCons(
																								eq.Given[int](),
																								eq.HCons(
																									eq.Given[int](),
																									eq.HCons(
																										eq.Given[int](),
																										eq.HCons(
																											eq.Given[int](),
																											eq.HCons(
																												eq.Given[int](),
																												eq.HCons(
																													eq.Given[int](),
																													eq.HCons(
																														eq.Given[int](),
																														eq.HCons(
																															eq.Given[int](),
																															eq.HCons(
																																eq.Given[int](),
																																eq.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21) hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.Unapply()
			h30 := hlist.Empty()
			h29 := hlist.Concat(i29, h30)
			h28 := hlist.Concat(i28, h29)
			h27 := hlist.Concat(i27, h28)
			h26 := hlist.Concat(i26, h27)
			h25 := hlist.Concat(i25, h26)
			h24 := hlist.Concat(i24, h25)
			h23 := hlist.Concat(i23, h24)
			h22 := hlist.Concat(i22, h23)
			h21 := hlist.Concat(i21, h22)
			h20 := hlist.Concat(i20, h21)
			h19 := hlist.Concat(i19, h20)
			h18 := hlist.Concat(i18, h19)
			h17 := hlist.Concat(i17, h18)
			h16 := hlist.Concat(i16, h17)
			h15 := hlist.Concat(i15, h16)
			h14 := hlist.Concat(i14, h15)
			h13 := hlist.Concat(i13, h14)
			h12 := hlist.Concat(i12, h13)
			h11 := hlist.Concat(i11, h12)
			h10 := hlist.Concat(i10, h11)
			h9 := hlist.Concat(i9, h10)
			h8 := hlist.Concat(i8, h9)
			h7 := hlist.Concat(i7, h8)
			h6 := hlist.Concat(i6, h7)
			h5 := hlist.Concat(i5, h6)
			h4 := hlist.Concat(i4, h5)
			h3 := hlist.Concat(i3, h4)
			h2 := hlist.Concat(i2, h3)
			h1 := hlist.Concat(i1, h2)
			h0 := hlist.Concat(i0, h1)
			return h0
		},
	)
}

func MonoidOver21() fp.Monoid[Over21] {
	return monoid.IMap(
		monoid.HCons(
			monoid.Product[int](),
			monoid.HCons(
				monoid.Product[int](),
				monoid.HCons(
					monoid.Product[int](),
					monoid.HCons(
						monoid.Product[int](),
						monoid.HCons(
							monoid.Product[int](),
							monoid.HCons(
								monoid.Product[int](),
								monoid.HCons(
									monoid.Product[int](),
									monoid.HCons(
										monoid.Product[int](),
										monoid.HCons(
											monoid.Product[int](),
											monoid.HCons(
												monoid.Product[int](),
												monoid.HCons(
													monoid.Product[int](),
													monoid.HCons(
														monoid.Product[int](),
														monoid.HCons(
															monoid.Product[int](),
															monoid.HCons(
																monoid.Product[int](),
																monoid.HCons(
																	monoid.Product[int](),
																	monoid.HCons(
																		monoid.Product[int](),
																		monoid.HCons(
																			monoid.Product[int](),
																			monoid.HCons(
																				monoid.Product[int](),
																				monoid.HCons(
																					monoid.Product[int](),
																					monoid.HCons(
																						monoid.Product[int](),
																						monoid.HCons(
																							monoid.Product[int](),
																							monoid.HCons(
																								monoid.Product[int](),
																								monoid.HCons(
																									monoid.Product[int](),
																									monoid.HCons(
																										monoid.Product[int](),
																										monoid.HCons(
																											monoid.Product[int](),
																											monoid.HCons(
																												monoid.Product[int](),
																												monoid.HCons(
																													monoid.Product[int](),
																													monoid.HCons(
																														monoid.Product[int](),
																														monoid.HCons(
																															monoid.Product[int](),
																															monoid.HCons(
																																monoid.Product[int](),
																																monoid.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21 {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hlist.Head(hl29)
			return Over21Builder{}.Apply(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29).Build()
		},
		func(v Over21) hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.Unapply()
			h30 := hlist.Empty()
			h29 := hlist.Concat(i29, h30)
			h28 := hlist.Concat(i28, h29)
			h27 := hlist.Concat(i27, h28)
			h26 := hlist.Concat(i26, h27)
			h25 := hlist.Concat(i25, h26)
			h24 := hlist.Concat(i24, h25)
			h23 := hlist.Concat(i23, h24)
			h22 := hlist.Concat(i22, h23)
			h21 := hlist.Concat(i21, h22)
			h20 := hlist.Concat(i20, h21)
			h19 := hlist.Concat(i19, h20)
			h18 := hlist.Concat(i18, h19)
			h17 := hlist.Concat(i17, h18)
			h16 := hlist.Concat(i16, h17)
			h15 := hlist.Concat(i15, h16)
			h14 := hlist.Concat(i14, h15)
			h13 := hlist.Concat(i13, h14)
			h12 := hlist.Concat(i12, h13)
			h11 := hlist.Concat(i11, h12)
			h10 := hlist.Concat(i10, h11)
			h9 := hlist.Concat(i9, h10)
			h8 := hlist.Concat(i8, h9)
			h7 := hlist.Concat(i7, h8)
			h6 := hlist.Concat(i6, h7)
			h5 := hlist.Concat(i5, h6)
			h4 := hlist.Concat(i4, h5)
			h3 := hlist.Concat(i3, h4)
			h2 := hlist.Concat(i2, h3)
			h1 := hlist.Concat(i1, h2)
			h0 := hlist.Concat(i0, h1)
			return h0
		},
	)
}

func ReadOver21() read.Read[Over21] {
	return read.Generic(
		fp.Generic[Over21, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]{
			Type: "testpk1.Over21",
			Kind: "Struct",
			To: func(v Over21) hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
				i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.Unapply()
				h30 := hlist.Empty()
				h29 := hlist.Concat(i29, h30)
				h28 := hlist.Concat(i28, h29)
				h27 := hlist.Concat(i27, h28)
				h26 := hlist.Concat(i26, h27)
				h25 := hlist.Concat(i25, h26)
				h24 := hlist.Concat(i24, h25)
				h23 := hlist.Concat(i23, h24)
				h22 := hlist.Concat(i22, h23)
				h21 := hlist.Concat(i21, h22)
				h20 := hlist.Concat(i20, h21)
				h19 := hlist.Concat(i19, h20)
				h18 := hlist.Concat(i18, h19)
				h17 := hlist.Concat(i17, h18)
				h16 := hlist.Concat(i16, h17)
				h15 := hlist.Concat(i15, h16)
				h14 := hlist.Concat(i14, h15)
				h13 := hlist.Concat(i13, h14)
				h12 := hlist.Concat(i12, h13)
				h11 := hlist.Concat(i11, h12)
				h10 := hlist.Concat(i10, h11)
				h9 := hlist.Concat(i9, h10)
				h8 := hlist.Concat(i8, h9)
				h7 := hlist.Concat(i7, h8)
				h6 := hlist.Concat(i6, h7)
				h5 := hlist.Concat(i5, h6)
				h4 := hlist.Concat(i4, h5)
				h3 := hlist.Concat(i3, h4)
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21 {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2, hl3 := hlist.Unapply(hl2)
				i3, hl4 := hlist.Unapply(hl3)
				i4, hl5 := hlist.Unapply(hl4)
				i5, hl6 := hlist.Unapply(hl5)
				i6, hl7 := hlist.Unapply(hl6)
				i7, hl8 := hlist.Unapply(hl7)
				i8, hl9 := hlist.Unapply(hl8)
				i9, hl10 := hlist.Unapply(hl9)
				i10, hl11 := hlist.Unapply(hl10)
				i11, hl12 := hlist.Unapply(hl11)
				i12, hl13 := hlist.Unapply(hl12)
				i13, hl14 := hlist.Unapply(hl13)
				i14, hl15 := hlist.Unapply(hl14)
				i15, hl16 := hlist.Unapply(hl15)
				i16, hl17 := hlist.Unapply(hl16)
				i17, hl18 := hlist.Unapply(hl17)
				i18, hl19 := hlist.Unapply(hl18)
				i19, hl20 := hlist.Unapply(hl19)
				i20, hl21 := hlist.Unapply(hl20)
				i21, hl22 := hlist.Unapply(hl21)
				i22, hl23 := hlist.Unapply(hl22)
				i23, hl24 := hlist.Unapply(hl23)
				i24, hl25 := hlist.Unapply(hl24)
				i25, hl26 := hlist.Unapply(hl25)
				i26, hl27 := hlist.Unapply(hl26)
				i27, hl28 := hlist.Unapply(hl27)
				i28, hl29 := hlist.Unapply(hl28)
				i29 := hlist.Head(hl29)
				return Over21Builder{}.Apply(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29).Build()
			},
		},
		read.TupleHCons(
			read.Int[int](),
			read.TupleHCons(
				read.Int[int](),
				read.TupleHCons(
					read.Int[int](),
					read.TupleHCons(
						read.Int[int](),
						read.TupleHCons(
							read.Int[int](),
							read.TupleHCons(
								read.Int[int](),
								read.TupleHCons(
									read.Int[int](),
									read.TupleHCons(
										read.Int[int](),
										read.TupleHCons(
											read.Int[int](),
											read.TupleHCons(
												read.Int[int](),
												read.TupleHCons(
													read.Int[int](),
													read.TupleHCons(
														read.Int[int](),
														read.TupleHCons(
															read.Int[int](),
															read.TupleHCons(
																read.Int[int](),
																read.TupleHCons(
																	read.Int[int](),
																	read.TupleHCons(
																		read.Int[int](),
																		read.TupleHCons(
																			read.Int[int](),
																			read.TupleHCons(
																				read.Int[int](),
																				read.TupleHCons(
																					read.Int[int](),
																					read.TupleHCons(
																						read.Int[int](),
																						read.TupleHCons(
																							read.Int[int](),
																							read.TupleHCons(
																								read.Int[int](),
																								read.TupleHCons(
																									read.Int[int](),
																									read.TupleHCons(
																										read.Int[int](),
																										read.TupleHCons(
																											read.Int[int](),
																											read.TupleHCons(
																												read.Int[int](),
																												read.TupleHCons(
																													read.Int[int](),
																													read.TupleHCons(
																														read.Int[int](),
																														read.TupleHCons(
																															read.Int[int](),
																															read.TupleHCons(
																																read.Int[int](),
																																read.TupleHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
	)
}

func EncoderOver21() js.Encoder[Over21] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
					js.EncoderHConsLabelled(
						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
						js.EncoderHConsLabelled(
							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
							js.EncoderHConsLabelled(
								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
								js.EncoderHConsLabelled(
									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
									js.EncoderHConsLabelled(
										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
										js.EncoderHConsLabelled(
											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
											js.EncoderHConsLabelled(
												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
												js.EncoderHConsLabelled(
													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
													js.EncoderHConsLabelled(
														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
														js.EncoderHConsLabelled(
															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
															js.EncoderHConsLabelled(
																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																js.EncoderHConsLabelled(
																	js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																	js.EncoderHConsLabelled(
																		js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																		js.EncoderHConsLabelled(
																			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																			js.EncoderHConsLabelled(
																				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																				js.EncoderHConsLabelled(
																					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																					js.EncoderHConsLabelled(
																						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																						js.EncoderHConsLabelled(
																							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																							js.EncoderHConsLabelled(
																								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																								js.EncoderHConsLabelled(
																									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																									js.EncoderHConsLabelled(
																										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																										js.EncoderHConsLabelled(
																											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																											js.EncoderHConsLabelled(
																												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																												js.EncoderHConsLabelled(
																													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																													js.EncoderHConsLabelled(
																														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																														js.EncoderHConsLabelled(
																															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																															js.EncoderHConsLabelled(
																																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																																js.EncoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21) hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.Unapply()
			return hlist.Concat(as.NamedWithTag("i1", i0, ``),
				hlist.Concat(as.NamedWithTag("i2", i1, ``),
					hlist.Concat(as.NamedWithTag("i3", i2, ``),
						hlist.Concat(as.NamedWithTag("i4", i3, ``),
							hlist.Concat(as.NamedWithTag("i5", i4, ``),
								hlist.Concat(as.NamedWithTag("i6", i5, ``),
									hlist.Concat(as.NamedWithTag("i7", i6, ``),
										hlist.Concat(as.NamedWithTag("i8", i7, ``),
											hlist.Concat(as.NamedWithTag("i9", i8, ``),
												hlist.Concat(as.NamedWithTag("i10", i9, ``),
													hlist.Concat(as.NamedWithTag("i11", i10, ``),
														hlist.Concat(as.NamedWithTag("i12", i11, ``),
															hlist.Concat(as.NamedWithTag("i13", i12, ``),
																hlist.Concat(as.NamedWithTag("i14", i13, ``),
																	hlist.Concat(as.NamedWithTag("i15", i14, ``),
																		hlist.Concat(as.NamedWithTag("i16", i15, ``),
																			hlist.Concat(as.NamedWithTag("i17", i16, ``),
																				hlist.Concat(as.NamedWithTag("i18", i17, ``),
																					hlist.Concat(as.NamedWithTag("i19", i18, ``),
																						hlist.Concat(as.NamedWithTag("i20", i19, ``),
																							hlist.Concat(as.NamedWithTag("i21", i20, ``),
																								hlist.Concat(as.NamedWithTag("i22", i21, ``),
																									hlist.Concat(as.NamedWithTag("i23", i22, ``),
																										hlist.Concat(as.NamedWithTag("i24", i23, ``),
																											hlist.Concat(as.NamedWithTag("i25", i24, ``),
																												hlist.Concat(as.NamedWithTag("i26", i25, ``),
																													hlist.Concat(as.NamedWithTag("i27", i26, ``),
																														hlist.Concat(as.NamedWithTag("i28", i27, ``),
																															hlist.Concat(as.NamedWithTag("i29", i28, ``),
																																hlist.Concat(as.NamedWithTag("i30", i29, ``),
																																	hlist.Empty(),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			)
		},
	)
}

func DecoderOver21() js.Decoder[Over21] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
					js.DecoderHConsLabelled(
						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
						js.DecoderHConsLabelled(
							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
							js.DecoderHConsLabelled(
								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
								js.DecoderHConsLabelled(
									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
									js.DecoderHConsLabelled(
										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
										js.DecoderHConsLabelled(
											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
											js.DecoderHConsLabelled(
												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
												js.DecoderHConsLabelled(
													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
													js.DecoderHConsLabelled(
														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
														js.DecoderHConsLabelled(
															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
															js.DecoderHConsLabelled(
																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																js.DecoderHConsLabelled(
																	js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																	js.DecoderHConsLabelled(
																		js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																		js.DecoderHConsLabelled(
																			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																			js.DecoderHConsLabelled(
																				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																				js.DecoderHConsLabelled(
																					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																					js.DecoderHConsLabelled(
																						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																						js.DecoderHConsLabelled(
																							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																							js.DecoderHConsLabelled(
																								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																								js.DecoderHConsLabelled(
																									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																									js.DecoderHConsLabelled(
																										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																										js.DecoderHConsLabelled(
																											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																											js.DecoderHConsLabelled(
																												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																												js.DecoderHConsLabelled(
																													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																													js.DecoderHConsLabelled(
																														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																														js.DecoderHConsLabelled(
																															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																															js.DecoderHConsLabelled(
																																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																																js.DecoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21 {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hlist.Head(hl29)
			return Over21Builder{}.Apply(i0.Value(), i1.Value(), i2.Value(), i3.Value(), i4.Value(), i5.Value(), i6.Value(), i7.Value(), i8.Value(), i9.Value(), i10.Value(), i11.Value(), i12.Value(), i13.Value(), i14.Value(), i15.Value(), i16.Value(), i17.Value(), i18.Value(), i19.Value(), i20.Value(), i21.Value(), i22.Value(), i23.Value(), i24.Value(), i25.Value(), i26.Value(), i27.Value(), i28.Value(), i29.Value()).Build()
		},
	)
}

func EqLegacyStruct() fp.Eq[LegacyStruct] {
	return eq.ContraMap(
		eq.Tuple4(eq.String, eq.Given[int](), eq.String, eq.ContraMap(
			eq.Tuple2(eq.String, eq.Given[int]()),
			func(v struct {
				Hello string
				World int
			}) fp.Tuple2[string, int] {
				return fp.Tuple2[string, int]{
					I1: v.Hello,
					I2: v.World,
				}
			},
		)),
		func(v LegacyStruct) fp.Tuple4[string, int, string, struct {
			Hello string
			World int
		}] {
			return fp.Tuple4[string, int, string, struct {
				Hello string
				World int
			}]{
				I1: v.Name,
				I2: v.Age,
				I3: v.privacy,
				I4: v.NoName,
			}
		},
	)
}

func DecoderLegacyStruct() js.Decoder[LegacyStruct] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
					js.DecoderHConsLabelled(
						js.DecoderNamed[fp.RuntimeNamed[struct {
							Hello string
							World int
						}]](js.DecoderMap(
							js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString), js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]())),
							func(t fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]]) struct {
								Hello string
								World int
							} {
								return struct {
									Hello string
									World int
								}{Hello: t.I1.Value(), World: t.I2.Value()}
							},
						)),
						js.DecoderHNil,
					),
				),
			),
		),
		func(hl0 hlist.Cons[fp.RuntimeNamed[string], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[string], hlist.Cons[fp.RuntimeNamed[struct {
			Hello string
			World int
		}], hlist.Nil]]]]) LegacyStruct {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3 := hlist.Head(hl3)
			return LegacyStruct{Name: i0.Value(), Age: i1.Value(), privacy: i2.Value(), NoName: i3.Value()}
		},
	)
}

func EqLocalEmbedPrivate() fp.Eq[LocalEmbedPrivate] {
	return eq.ContraMap(
		eq.Tuple4(eq.String, eq.Given[int](), eq.String, eq.ContraMap(
			eq.Tuple2(eq.String, eq.Given[int]()),
			func(v struct {
				Hello string
				world int
			}) fp.Tuple2[string, int] {
				return fp.Tuple2[string, int]{
					I1: v.Hello,
					I2: v.world,
				}
			},
		)),
		func(v LocalEmbedPrivate) fp.Tuple4[string, int, string, struct {
			Hello string
			world int
		}] {
			return fp.Tuple4[string, int, string, struct {
				Hello string
				world int
			}]{
				I1: v.Name,
				I2: v.Age,
				I3: v.privacy,
				I4: v.NoName,
			}
		},
	)
}

func ShowUseShow() fp.Show[UseShow] {
	return show.Generic(
		fp.Generic[UseShow, hlist.Cons[string, hlist.Cons[int, hlist.Nil]]]{
			Type: "testpk1.UseShow",
			Kind: "Struct",
			To: func(v UseShow) hlist.Cons[string, hlist.Cons[int, hlist.Nil]] {
				i0, i1 := v.hello, v.world
				h2 := hlist.Empty()
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Nil]]) UseShow {
				i0, hl1 := hlist.Unapply(hl0)
				i1 := hlist.Head(hl1)
				return UseShow{hello: i0, world: i1}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.HNil,
			),
		),
	)
}

func ShowShowHasTypeParam() fp.Show[ShowHasTypeParam] {
	return show.Generic(
		fp.Generic[ShowHasTypeParam, hlist.Cons[string, hlist.Cons[int, hlist.Cons[Container[int], hlist.Nil]]]]{
			Type: "testpk1.ShowHasTypeParam",
			Kind: "Struct",
			To: func(v ShowHasTypeParam) hlist.Cons[string, hlist.Cons[int, hlist.Cons[Container[int], hlist.Nil]]] {
				i0, i1, i2 := v.hello, v.world, v.message
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Cons[Container[int], hlist.Nil]]]) ShowHasTypeParam {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return ShowHasTypeParam{hello: i0, world: i1, message: i2}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					ShowContainer(show.Int[int]()),
					show.HNil,
				),
			),
		),
	)
}

func ShowShowConstraint[T fmt.Stringer](showT fp.Show[T]) fp.Show[ShowConstraint[T]] {
	return show.Generic(
		fp.Generic[ShowConstraint[T], hlist.Cons[string, hlist.Cons[int, hlist.Cons[T, hlist.Nil]]]]{
			Type: "testpk1.ShowConstraint",
			Kind: "Struct",
			To: func(v ShowConstraint[T]) hlist.Cons[string, hlist.Cons[int, hlist.Cons[T, hlist.Nil]]] {
				i0, i1, i2 := v.hello, v.world, v.message
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Cons[T, hlist.Nil]]]) ShowConstraint[T] {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return ShowConstraint[T]{hello: i0, world: i1, message: i2}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					showT,
					show.HNil,
				),
			),
		),
	)
}

func EncoderCar[S any, T comparable](encoderS js.Encoder[S], encoderT js.Encoder[T]) js.Encoder[Car[S, T]] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[NamedCompanyOfCar](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NamedModelOfCar](js.EncoderString),
				js.EncoderHConsLabelled(
					js.EncoderNamed[NamedYearOfCar](js.EncoderNumber[int]()),
					js.EncoderHConsLabelled(
						js.EncoderNamed[NamedSpecOfCar[S]](encoderS),
						js.EncoderHConsLabelled(
							js.EncoderNamed[NamedOptOfCar[T]](js.EncoderOption(encoderT)),
							js.EncoderHNil,
						),
					),
				),
			),
		),
		func(v Car[S, T]) hlist.Cons[NamedCompanyOfCar, hlist.Cons[NamedModelOfCar, hlist.Cons[NamedYearOfCar, hlist.Cons[NamedSpecOfCar[S], hlist.Cons[NamedOptOfCar[T], hlist.Nil]]]]] {
			i0, i1, i2, i3, i4 := v.Unapply()
			return hlist.Concat(NamedCompanyOfCar{i0},
				hlist.Concat(NamedModelOfCar{i1},
					hlist.Concat(NamedYearOfCar{i2},
						hlist.Concat(NamedSpecOfCar[S]{i3},
							hlist.Concat(NamedOptOfCar[T]{i4},
								hlist.Empty(),
							),
						),
					),
				),
			)
		},
	)
}

func init() {
	eqPtrWorld = eq.Ptr(lazy.Call(func() fp.Eq[World] {
		return EqWorld()
	}))
	eqworld = EqWorld()
	eqMySeqInt = EqMySeq(eq.Given[int]())
	kcar = EncoderCar(js.EncoderString, js.EncoderNumber[int]())
}
