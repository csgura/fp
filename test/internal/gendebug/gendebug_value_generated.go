// Code generated by gombok, DO NOT EDIT.
package gendebug

import (
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/test/internal/testpk1"
	"github.com/csgura/fp/test/internal/testpk2"
)

func (r AliasTest) Ctx() testpk1.Pk1Context {
	return r.ctx
}

func (r AliasTest) Other() Pk1Context {
	return r.other
}

func (r AliasTest) Pk2ctx() testpk2.Pk1Context {
	return r.pk2ctx
}

func (r AliasTest) WithCtx(v testpk1.Pk1Context) AliasTest {
	r.ctx = v
	return r
}

func (r AliasTest) WithOther(v Pk1Context) AliasTest {
	r.other = v
	return r
}

func (r AliasTest) WithPk2ctx(v testpk2.Pk1Context) AliasTest {
	r.pk2ctx = v
	return r
}

func (r AliasTest) String() string {
	return fmt.Sprintf("gendebug.AliasTest{ctx:%v, other:%v, pk2ctx:%v}", r.ctx, r.other, r.pk2ctx)
}

func (r AliasTest) AsTuple() fp.Tuple3[testpk1.Pk1Context, Pk1Context, testpk2.Pk1Context] {
	return as.Tuple3(r.ctx, r.other, r.pk2ctx)
}

func (r AliasTest) Unapply() (testpk1.Pk1Context, Pk1Context, testpk2.Pk1Context) {
	return r.ctx, r.other, r.pk2ctx
}

func (r AliasTest) AsMap() map[string]any {
	m := map[string]any{}
	m["ctx"] = r.ctx
	m["other"] = r.other
	m["pk2ctx"] = r.pk2ctx
	return m
}

type AliasTestBuilder AliasTest

func (r AliasTestBuilder) Build() AliasTest {
	return AliasTest(r)
}

func (r AliasTest) Builder() AliasTestBuilder {
	return AliasTestBuilder(r)
}

func (r AliasTestBuilder) Ctx(v testpk1.Pk1Context) AliasTestBuilder {
	r.ctx = v
	return r
}

func (r AliasTestBuilder) Other(v Pk1Context) AliasTestBuilder {
	r.other = v
	return r
}

func (r AliasTestBuilder) Pk2ctx(v testpk2.Pk1Context) AliasTestBuilder {
	r.pk2ctx = v
	return r
}

func (r AliasTestBuilder) FromTuple(t fp.Tuple3[testpk1.Pk1Context, Pk1Context, testpk2.Pk1Context]) AliasTestBuilder {
	r.ctx = t.I1
	r.other = t.I2
	r.pk2ctx = t.I3
	return r
}

func (r AliasTestBuilder) Apply(ctx testpk1.Pk1Context, other Pk1Context, pk2ctx testpk2.Pk1Context) AliasTestBuilder {
	r.ctx = ctx
	r.other = other
	r.pk2ctx = pk2ctx
	return r
}

func (r AliasTestBuilder) FromMap(m map[string]any) AliasTestBuilder {

	if v, ok := m["ctx"].(testpk1.Pk1Context); ok {
		r.ctx = v
	}

	if v, ok := m["other"].(Pk1Context); ok {
		r.other = v
	}

	if v, ok := m["pk2ctx"].(testpk2.Pk1Context); ok {
		r.pk2ctx = v
	}

	return r
}

type AliasTestMutable struct {
	Ctx    testpk1.Pk1Context
	Other  Pk1Context
	Pk2ctx testpk2.Pk1Context
}

func (r AliasTest) AsMutable() AliasTestMutable {
	return AliasTestMutable{
		Ctx:    r.ctx,
		Other:  r.other,
		Pk2ctx: r.pk2ctx,
	}
}

func (r AliasTestMutable) AsImmutable() AliasTest {
	return AliasTest{
		ctx:    r.Ctx,
		other:  r.Other,
		pk2ctx: r.Pk2ctx,
	}
}
