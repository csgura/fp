// Code generated by gombok, DO NOT EDIT.
package recursive

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hlist"
	"github.com/csgura/fp/monoid"
	"github.com/csgura/fp/product"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/show"
	"github.com/csgura/fp/test/internal/testpk1"
)

func EqNormalStruct() fp.Eq[NormalStruct] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.Given[int](), eq.String),
		func(v NormalStruct) fp.Tuple3[string, int, string] {
			return fp.Tuple3[string, int, string]{
				I1: v.Name,
				I2: v.Age,
				I3: v.Address,
			}
		},
	)
}

func MonoidNormalStruct() fp.Monoid[NormalStruct] {
	return monoid.IMap(
		monoid.Tuple3(monoid.String, monoid.Product[int](), monoid.String),
		func(t fp.Tuple3[string, int, string]) NormalStruct {
			return NormalStruct{
				Name:    t.I1,
				Age:     t.I2,
				Address: t.I3,
			}
		},
		func(v NormalStruct) fp.Tuple3[string, int, string] {
			return fp.Tuple3[string, int, string]{
				I1: v.Name,
				I2: v.Age,
				I3: v.Address,
			}
		},
	)
}

func ShowNormalStruct() fp.Show[NormalStruct] {
	return show.Generic(
		fp.Generic[NormalStruct, hlist.Cons[string, hlist.Cons[int, hlist.Cons[string, hlist.Nil]]]]{
			Type: "recursive.NormalStruct",
			Kind: "Struct",
			To: func(v NormalStruct) hlist.Cons[string, hlist.Cons[int, hlist.Cons[string, hlist.Nil]]] {
				i0, i1, i2 := v.Name, v.Age, v.Address
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Cons[string, hlist.Nil]]]) NormalStruct {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return NormalStruct{Name: i0, Age: i1, Address: i2}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					show.String,
					show.HNil,
				),
			),
		),
	)
}

func EncoderNormalStruct() js.Encoder[NormalStruct] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
					js.EncoderHNil,
				),
			),
		),
		fp.Compose(
			func(v NormalStruct) fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]] {
				i0, i1, i2 := v.Name, v.Age, v.Address
				return as.Labelled3(as.NamedWithTag("Name", i0, `json:"name"`), as.NamedWithTag("Age", i1, ``), as.NamedWithTag("Address", i2, ``))
			},
			as.HList3Labelled,
		),
	)
}

func DecoderNormalStruct() js.Decoder[NormalStruct] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
					js.DecoderHNil,
				),
			),
		),

		fp.Compose(
			product.LabelledFromHList3,
			func(t fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]]) NormalStruct {
				return NormalStruct{Name: t.I1.Value(), Age: t.I2.Value(), Address: t.I3.Value()}
			},
		),
	)
}

func ShowTuple2Struct() fp.Show[Tuple2Struct] {
	return show.Generic(
		fp.Generic[Tuple2Struct, hlist.Cons[string, hlist.Cons[int, hlist.Nil]]]{
			Type: "recursive.Tuple2Struct",
			Kind: "Struct",
			To: func(v Tuple2Struct) hlist.Cons[string, hlist.Cons[int, hlist.Nil]] {
				i0, i1 := v.Name, v.Age
				h2 := hlist.Empty()
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Nil]]) Tuple2Struct {
				i0, hl1 := hlist.Unapply(hl0)
				i1 := hlist.Head(hl1)
				return Tuple2Struct{Name: i0, Age: i1}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.HNil,
			),
		),
	)
}

func EncoderTuple2Struct() js.Encoder[Tuple2Struct] {
	return js.EncoderContraMap(
		js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString), js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]())),
		func(v Tuple2Struct) fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]] {
			i0, i1 := v.Name, v.Age
			return as.Labelled2(as.NamedWithTag("Name", i0, ``), as.NamedWithTag("Age", i1, ``))
		},
	)
}

func DecoderTuple2Struct() js.Decoder[Tuple2Struct] {
	return js.DecoderMap(
		js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString), js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]())),
		func(t fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]]) Tuple2Struct {
			return Tuple2Struct{Name: t.I1.Value(), Age: t.I2.Value()}
		},
	)
}

func EqOver21[T any](eqT fp.Eq[T]) fp.Eq[Over21[T]] {
	return eq.ContraMap(
		eq.HCons(
			eqT,
			eq.HCons(
				eq.Given[int](),
				eq.HCons(
					eq.Given[int](),
					eq.HCons(
						eq.Given[int](),
						eq.HCons(
							eq.Given[int](),
							eq.HCons(
								eq.Given[int](),
								eq.HCons(
									eq.Given[int](),
									eq.HCons(
										eq.Given[int](),
										eq.HCons(
											eq.Given[int](),
											eq.HCons(
												eq.Given[int](),
												eq.HCons(
													eq.Given[int](),
													eq.HCons(
														eq.Given[int](),
														eq.HCons(
															eq.Given[int](),
															eq.HCons(
																eq.Given[int](),
																eq.HCons(
																	eq.Given[int](),
																	eq.HCons(
																		eq.Given[int](),
																		eq.HCons(
																			eq.Given[int](),
																			eq.HCons(
																				eq.Given[int](),
																				eq.HCons(
																					eq.Given[int](),
																					eq.HCons(
																						eq.Given[int](),
																						eq.HCons(
																							eq.Given[int](),
																							eq.HCons(
																								eq.Given[int](),
																								eq.HCons(
																									eq.Given[int](),
																									eq.HCons(
																										eq.Given[int](),
																										eq.HCons(
																											eq.Given[int](),
																											eq.HCons(
																												eq.Given[int](),
																												eq.HCons(
																													eq.Given[int](),
																													eq.HCons(
																														eq.Given[int](),
																														eq.HCons(
																															eq.Given[int](),
																															eq.HCons(
																																eq.Given[int](),
																																eq.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			h30 := hlist.Empty()
			h29 := hlist.Concat(i29, h30)
			h28 := hlist.Concat(i28, h29)
			h27 := hlist.Concat(i27, h28)
			h26 := hlist.Concat(i26, h27)
			h25 := hlist.Concat(i25, h26)
			h24 := hlist.Concat(i24, h25)
			h23 := hlist.Concat(i23, h24)
			h22 := hlist.Concat(i22, h23)
			h21 := hlist.Concat(i21, h22)
			h20 := hlist.Concat(i20, h21)
			h19 := hlist.Concat(i19, h20)
			h18 := hlist.Concat(i18, h19)
			h17 := hlist.Concat(i17, h18)
			h16 := hlist.Concat(i16, h17)
			h15 := hlist.Concat(i15, h16)
			h14 := hlist.Concat(i14, h15)
			h13 := hlist.Concat(i13, h14)
			h12 := hlist.Concat(i12, h13)
			h11 := hlist.Concat(i11, h12)
			h10 := hlist.Concat(i10, h11)
			h9 := hlist.Concat(i9, h10)
			h8 := hlist.Concat(i8, h9)
			h7 := hlist.Concat(i7, h8)
			h6 := hlist.Concat(i6, h7)
			h5 := hlist.Concat(i5, h6)
			h4 := hlist.Concat(i4, h5)
			h3 := hlist.Concat(i3, h4)
			h2 := hlist.Concat(i2, h3)
			h1 := hlist.Concat(i1, h2)
			h0 := hlist.Concat(i0, h1)
			return h0
		},
	)
}

func MonoidOver21[T any](monoidT fp.Monoid[T]) fp.Monoid[Over21[T]] {
	return monoid.IMap(
		monoid.HCons(
			monoidT,
			monoid.HCons(
				monoid.Product[int](),
				monoid.HCons(
					monoid.Product[int](),
					monoid.HCons(
						monoid.Product[int](),
						monoid.HCons(
							monoid.Product[int](),
							monoid.HCons(
								monoid.Product[int](),
								monoid.HCons(
									monoid.Product[int](),
									monoid.HCons(
										monoid.Product[int](),
										monoid.HCons(
											monoid.Product[int](),
											monoid.HCons(
												monoid.Product[int](),
												monoid.HCons(
													monoid.Product[int](),
													monoid.HCons(
														monoid.Product[int](),
														monoid.HCons(
															monoid.Product[int](),
															monoid.HCons(
																monoid.Product[int](),
																monoid.HCons(
																	monoid.Product[int](),
																	monoid.HCons(
																		monoid.Product[int](),
																		monoid.HCons(
																			monoid.Product[int](),
																			monoid.HCons(
																				monoid.Product[int](),
																				monoid.HCons(
																					monoid.Product[int](),
																					monoid.HCons(
																						monoid.Product[int](),
																						monoid.HCons(
																							monoid.Product[int](),
																							monoid.HCons(
																								monoid.Product[int](),
																								monoid.HCons(
																									monoid.Product[int](),
																									monoid.HCons(
																										monoid.Product[int](),
																										monoid.HCons(
																											monoid.Product[int](),
																											monoid.HCons(
																												monoid.Product[int](),
																												monoid.HCons(
																													monoid.Product[int](),
																													monoid.HCons(
																														monoid.Product[int](),
																														monoid.HCons(
																															monoid.Product[int](),
																															monoid.HCons(
																																monoid.Product[int](),
																																monoid.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hlist.Head(hl29)
			return Over21[T]{I1: i0, I2: i1, I3: i2, I4: i3, I5: i4, I6: i5, I7: i6, I8: i7, I9: i8, I10: i9, I11: i10, I12: i11, I13: i12, I14: i13, I15: i14, I16: i15, I17: i16, I18: i17, I19: i18, I20: i19, I21: i20, I22: i21, I23: i22, I24: i23, I25: i24, I26: i25, I27: i26, I28: i27, I29: i28, I30: i29}
		},
		func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			h30 := hlist.Empty()
			h29 := hlist.Concat(i29, h30)
			h28 := hlist.Concat(i28, h29)
			h27 := hlist.Concat(i27, h28)
			h26 := hlist.Concat(i26, h27)
			h25 := hlist.Concat(i25, h26)
			h24 := hlist.Concat(i24, h25)
			h23 := hlist.Concat(i23, h24)
			h22 := hlist.Concat(i22, h23)
			h21 := hlist.Concat(i21, h22)
			h20 := hlist.Concat(i20, h21)
			h19 := hlist.Concat(i19, h20)
			h18 := hlist.Concat(i18, h19)
			h17 := hlist.Concat(i17, h18)
			h16 := hlist.Concat(i16, h17)
			h15 := hlist.Concat(i15, h16)
			h14 := hlist.Concat(i14, h15)
			h13 := hlist.Concat(i13, h14)
			h12 := hlist.Concat(i12, h13)
			h11 := hlist.Concat(i11, h12)
			h10 := hlist.Concat(i10, h11)
			h9 := hlist.Concat(i9, h10)
			h8 := hlist.Concat(i8, h9)
			h7 := hlist.Concat(i7, h8)
			h6 := hlist.Concat(i6, h7)
			h5 := hlist.Concat(i5, h6)
			h4 := hlist.Concat(i4, h5)
			h3 := hlist.Concat(i3, h4)
			h2 := hlist.Concat(i2, h3)
			h1 := hlist.Concat(i1, h2)
			h0 := hlist.Concat(i0, h1)
			return h0
		},
	)
}

func ShowOver21[T any](showT fp.Show[T]) fp.Show[Over21[T]] {
	return show.Generic(
		fp.Generic[Over21[T], hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]{
			Type: "recursive.Over21",
			Kind: "Struct",
			To: func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
				i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
				h30 := hlist.Empty()
				h29 := hlist.Concat(i29, h30)
				h28 := hlist.Concat(i28, h29)
				h27 := hlist.Concat(i27, h28)
				h26 := hlist.Concat(i26, h27)
				h25 := hlist.Concat(i25, h26)
				h24 := hlist.Concat(i24, h25)
				h23 := hlist.Concat(i23, h24)
				h22 := hlist.Concat(i22, h23)
				h21 := hlist.Concat(i21, h22)
				h20 := hlist.Concat(i20, h21)
				h19 := hlist.Concat(i19, h20)
				h18 := hlist.Concat(i18, h19)
				h17 := hlist.Concat(i17, h18)
				h16 := hlist.Concat(i16, h17)
				h15 := hlist.Concat(i15, h16)
				h14 := hlist.Concat(i14, h15)
				h13 := hlist.Concat(i13, h14)
				h12 := hlist.Concat(i12, h13)
				h11 := hlist.Concat(i11, h12)
				h10 := hlist.Concat(i10, h11)
				h9 := hlist.Concat(i9, h10)
				h8 := hlist.Concat(i8, h9)
				h7 := hlist.Concat(i7, h8)
				h6 := hlist.Concat(i6, h7)
				h5 := hlist.Concat(i5, h6)
				h4 := hlist.Concat(i4, h5)
				h3 := hlist.Concat(i3, h4)
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2, hl3 := hlist.Unapply(hl2)
				i3, hl4 := hlist.Unapply(hl3)
				i4, hl5 := hlist.Unapply(hl4)
				i5, hl6 := hlist.Unapply(hl5)
				i6, hl7 := hlist.Unapply(hl6)
				i7, hl8 := hlist.Unapply(hl7)
				i8, hl9 := hlist.Unapply(hl8)
				i9, hl10 := hlist.Unapply(hl9)
				i10, hl11 := hlist.Unapply(hl10)
				i11, hl12 := hlist.Unapply(hl11)
				i12, hl13 := hlist.Unapply(hl12)
				i13, hl14 := hlist.Unapply(hl13)
				i14, hl15 := hlist.Unapply(hl14)
				i15, hl16 := hlist.Unapply(hl15)
				i16, hl17 := hlist.Unapply(hl16)
				i17, hl18 := hlist.Unapply(hl17)
				i18, hl19 := hlist.Unapply(hl18)
				i19, hl20 := hlist.Unapply(hl19)
				i20, hl21 := hlist.Unapply(hl20)
				i21, hl22 := hlist.Unapply(hl21)
				i22, hl23 := hlist.Unapply(hl22)
				i23, hl24 := hlist.Unapply(hl23)
				i24, hl25 := hlist.Unapply(hl24)
				i25, hl26 := hlist.Unapply(hl25)
				i26, hl27 := hlist.Unapply(hl26)
				i27, hl28 := hlist.Unapply(hl27)
				i28, hl29 := hlist.Unapply(hl28)
				i29 := hlist.Head(hl29)
				return Over21[T]{I1: i0, I2: i1, I3: i2, I4: i3, I5: i4, I6: i5, I7: i6, I8: i7, I9: i8, I10: i9, I11: i10, I12: i11, I13: i12, I14: i13, I15: i14, I16: i15, I17: i16, I18: i17, I19: i18, I20: i19, I21: i20, I22: i21, I23: i22, I24: i23, I25: i24, I26: i25, I27: i26, I28: i27, I29: i28, I30: i29}
			},
		},
		show.StructHCons(
			showT,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					show.Int[int](),
					show.StructHCons(
						show.Int[int](),
						show.StructHCons(
							show.Int[int](),
							show.StructHCons(
								show.Int[int](),
								show.StructHCons(
									show.Int[int](),
									show.StructHCons(
										show.Int[int](),
										show.StructHCons(
											show.Int[int](),
											show.StructHCons(
												show.Int[int](),
												show.StructHCons(
													show.Int[int](),
													show.StructHCons(
														show.Int[int](),
														show.StructHCons(
															show.Int[int](),
															show.StructHCons(
																show.Int[int](),
																show.StructHCons(
																	show.Int[int](),
																	show.StructHCons(
																		show.Int[int](),
																		show.StructHCons(
																			show.Int[int](),
																			show.StructHCons(
																				show.Int[int](),
																				show.StructHCons(
																					show.Int[int](),
																					show.StructHCons(
																						show.Int[int](),
																						show.StructHCons(
																							show.Int[int](),
																							show.StructHCons(
																								show.Int[int](),
																								show.StructHCons(
																									show.Int[int](),
																									show.StructHCons(
																										show.Int[int](),
																										show.StructHCons(
																											show.Int[int](),
																											show.StructHCons(
																												show.Int[int](),
																												show.StructHCons(
																													show.Int[int](),
																													show.StructHCons(
																														show.Int[int](),
																														show.StructHCons(
																															show.Int[int](),
																															show.StructHCons(
																																show.Int[int](),
																																show.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
	)
}

func EncoderOver21[T any](encoderT js.Encoder[T]) js.Encoder[Over21[T]] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[T]](encoderT),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
					js.EncoderHConsLabelled(
						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
						js.EncoderHConsLabelled(
							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
							js.EncoderHConsLabelled(
								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
								js.EncoderHConsLabelled(
									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
									js.EncoderHConsLabelled(
										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
										js.EncoderHConsLabelled(
											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
											js.EncoderHConsLabelled(
												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
												js.EncoderHConsLabelled(
													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
													js.EncoderHConsLabelled(
														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
														js.EncoderHConsLabelled(
															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
															js.EncoderHConsLabelled(
																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																js.EncoderHConsLabelled(
																	js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																	js.EncoderHConsLabelled(
																		js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																		js.EncoderHConsLabelled(
																			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																			js.EncoderHConsLabelled(
																				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																				js.EncoderHConsLabelled(
																					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																					js.EncoderHConsLabelled(
																						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																						js.EncoderHConsLabelled(
																							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																							js.EncoderHConsLabelled(
																								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																								js.EncoderHConsLabelled(
																									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																									js.EncoderHConsLabelled(
																										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																										js.EncoderHConsLabelled(
																											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																											js.EncoderHConsLabelled(
																												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																												js.EncoderHConsLabelled(
																													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																													js.EncoderHConsLabelled(
																														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																														js.EncoderHConsLabelled(
																															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																															js.EncoderHConsLabelled(
																																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																																js.EncoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21[T]) hlist.Cons[fp.RuntimeNamed[T], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			return hlist.Concat(as.NamedWithTag("I1", i0, `json:"i1"`),
				hlist.Concat(as.NamedWithTag("I2", i1, ``),
					hlist.Concat(as.NamedWithTag("I3", i2, ``),
						hlist.Concat(as.NamedWithTag("I4", i3, ``),
							hlist.Concat(as.NamedWithTag("I5", i4, ``),
								hlist.Concat(as.NamedWithTag("I6", i5, ``),
									hlist.Concat(as.NamedWithTag("I7", i6, ``),
										hlist.Concat(as.NamedWithTag("I8", i7, ``),
											hlist.Concat(as.NamedWithTag("I9", i8, ``),
												hlist.Concat(as.NamedWithTag("I10", i9, ``),
													hlist.Concat(as.NamedWithTag("I11", i10, ``),
														hlist.Concat(as.NamedWithTag("I12", i11, ``),
															hlist.Concat(as.NamedWithTag("I13", i12, ``),
																hlist.Concat(as.NamedWithTag("I14", i13, ``),
																	hlist.Concat(as.NamedWithTag("I15", i14, ``),
																		hlist.Concat(as.NamedWithTag("I16", i15, ``),
																			hlist.Concat(as.NamedWithTag("I17", i16, ``),
																				hlist.Concat(as.NamedWithTag("I18", i17, ``),
																					hlist.Concat(as.NamedWithTag("I19", i18, ``),
																						hlist.Concat(as.NamedWithTag("I20", i19, ``),
																							hlist.Concat(as.NamedWithTag("I21", i20, ``),
																								hlist.Concat(as.NamedWithTag("I22", i21, ``),
																									hlist.Concat(as.NamedWithTag("I23", i22, ``),
																										hlist.Concat(as.NamedWithTag("I24", i23, ``),
																											hlist.Concat(as.NamedWithTag("I25", i24, ``),
																												hlist.Concat(as.NamedWithTag("I26", i25, ``),
																													hlist.Concat(as.NamedWithTag("I27", i26, ``),
																														hlist.Concat(as.NamedWithTag("I28", i27, ``),
																															hlist.Concat(as.NamedWithTag("I29", i28, ``),
																																hlist.Concat(as.NamedWithTag("I30", i29, ``),
																																	hlist.Empty(),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			)
		},
	)
}

func DecoderOver21[T any](decoderT js.Decoder[T]) js.Decoder[Over21[T]] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[T]](decoderT),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
					js.DecoderHConsLabelled(
						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
						js.DecoderHConsLabelled(
							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
							js.DecoderHConsLabelled(
								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
								js.DecoderHConsLabelled(
									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
									js.DecoderHConsLabelled(
										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
										js.DecoderHConsLabelled(
											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
											js.DecoderHConsLabelled(
												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
												js.DecoderHConsLabelled(
													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
													js.DecoderHConsLabelled(
														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
														js.DecoderHConsLabelled(
															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
															js.DecoderHConsLabelled(
																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																js.DecoderHConsLabelled(
																	js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																	js.DecoderHConsLabelled(
																		js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																		js.DecoderHConsLabelled(
																			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																			js.DecoderHConsLabelled(
																				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																				js.DecoderHConsLabelled(
																					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																					js.DecoderHConsLabelled(
																						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																						js.DecoderHConsLabelled(
																							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																							js.DecoderHConsLabelled(
																								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																								js.DecoderHConsLabelled(
																									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																									js.DecoderHConsLabelled(
																										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																										js.DecoderHConsLabelled(
																											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																											js.DecoderHConsLabelled(
																												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																												js.DecoderHConsLabelled(
																													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																													js.DecoderHConsLabelled(
																														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																														js.DecoderHConsLabelled(
																															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																															js.DecoderHConsLabelled(
																																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																																js.DecoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[fp.RuntimeNamed[T], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hl29.Head()
			return Over21[T]{I1: i0.Value(), I2: i1.Value(), I3: i2.Value(), I4: i3.Value(), I5: i4.Value(), I6: i5.Value(), I7: i6.Value(), I8: i7.Value(), I9: i8.Value(), I10: i9.Value(), I11: i10.Value(), I12: i11.Value(), I13: i12.Value(), I14: i13.Value(), I15: i14.Value(), I16: i15.Value(), I17: i16.Value(), I18: i17.Value(), I19: i18.Value(), I20: i19.Value(), I21: i20.Value(), I22: i21.Value(), I23: i22.Value(), I24: i23.Value(), I25: i24.Value(), I26: i25.Value(), I27: i26.Value(), I28: i27.Value(), I29: i28.Value(), I30: i29.Value()}
		},
	)
}

func EqTestpk1LegacyStruct() fp.Eq[testpk1.LegacyStruct] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.Given[int](), eq.ContraMap(
			eq.Tuple2(eq.String, eq.Given[int]()),
			func(v struct {
				Hello string
				World int
			}) fp.Tuple2[string, int] {
				return fp.Tuple2[string, int]{
					I1: v.Hello,
					I2: v.World,
				}
			},
		)),
		func(v testpk1.LegacyStruct) fp.Tuple3[string, int, struct {
			Hello string
			World int
		}] {
			return fp.Tuple3[string, int, struct {
				Hello string
				World int
			}]{
				I1: v.Name,
				I2: v.Age,
				I3: v.NoName,
			}
		},
	)
}

func MonoidTestpk1LegacyStruct() fp.Monoid[testpk1.LegacyStruct] {
	return monoid.IMap(
		monoid.Tuple3(monoid.String, monoid.Product[int](), monoid.IMap(
			monoid.Tuple2(monoid.String, monoid.Product[int]()),
			func(t fp.Tuple2[string, int]) struct {
				Hello string
				World int
			} {
				return struct {
					Hello string
					World int
				}{
					Hello: t.I1,
					World: t.I2,
				}
			},
			func(v struct {
				Hello string
				World int
			}) fp.Tuple2[string, int] {
				return fp.Tuple2[string, int]{
					I1: v.Hello,
					I2: v.World,
				}
			},
		)),
		func(t fp.Tuple3[string, int, struct {
			Hello string
			World int
		}]) testpk1.LegacyStruct {
			return testpk1.LegacyStruct{
				Name:   t.I1,
				Age:    t.I2,
				NoName: t.I3,
			}
		},
		func(v testpk1.LegacyStruct) fp.Tuple3[string, int, struct {
			Hello string
			World int
		}] {
			return fp.Tuple3[string, int, struct {
				Hello string
				World int
			}]{
				I1: v.Name,
				I2: v.Age,
				I3: v.NoName,
			}
		},
	)
}

func ShowTestpk1LegacyStruct() fp.Show[testpk1.LegacyStruct] {
	return show.Generic(
		fp.Generic[testpk1.LegacyStruct, hlist.Cons[string, hlist.Cons[int, hlist.Cons[struct {
			Hello string
			World int
		}, hlist.Nil]]]]{
			Type: "testpk1.LegacyStruct",
			Kind: "Struct",
			To: func(v testpk1.LegacyStruct) hlist.Cons[string, hlist.Cons[int, hlist.Cons[struct {
				Hello string
				World int
			}, hlist.Nil]]] {
				i0, i1, i2 := v.Name, v.Age, v.NoName
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Cons[struct {
				Hello string
				World int
			}, hlist.Nil]]]) testpk1.LegacyStruct {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return testpk1.LegacyStruct{Name: i0, Age: i1, NoName: i2}
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					show.Generic(
						fp.Generic[struct {
							Hello string
							World int
						}, hlist.Cons[string, hlist.Cons[int, hlist.Nil]]]{
							Type: "struct",
							Kind: "Struct",
							To: func(v struct {
								Hello string
								World int
							}) hlist.Cons[string, hlist.Cons[int, hlist.Nil]] {
								i0, i1 := v.Hello, v.World
								h2 := hlist.Empty()
								h1 := hlist.Concat(i1, h2)
								h0 := hlist.Concat(i0, h1)
								return h0
							},
							From: func(hl0 hlist.Cons[string, hlist.Cons[int, hlist.Nil]]) struct {
								Hello string
								World int
							} {
								i0, hl1 := hlist.Unapply(hl0)
								i1 := hlist.Head(hl1)
								return struct {
									Hello string
									World int
								}{Hello: i0, World: i1}
							},
						},
						show.StructHCons(
							show.String,
							show.StructHCons(
								show.Int[int](),
								show.HNil,
							),
						),
					),
					show.HNil,
				),
			),
		),
	)
}

func EncoderTestpk1LegacyStruct() js.Encoder[testpk1.LegacyStruct] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[struct {
						Hello string
						World int
					}]](js.EncoderContraMap(
						js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString), js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]())),
						func(v struct {
							Hello string
							World int
						}) fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]] {
							i0, i1 := v.Hello, v.World
							return as.Labelled2(as.NamedWithTag("Hello", i0, ``), as.NamedWithTag("World", i1, ``))
						},
					)),
					js.EncoderHNil,
				),
			),
		),
		fp.Compose(
			func(v testpk1.LegacyStruct) fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
				Hello string
				World int
			}]] {
				i0, i1, i2 := v.Name, v.Age, v.NoName
				return as.Labelled3(as.NamedWithTag("Name", i0, ``), as.NamedWithTag("Age", i1, ``), as.NamedWithTag("NoName", i2, ``))
			},
			as.HList3Labelled,
		),
	)
}

func DecoderTestpk1LegacyStruct() js.Decoder[testpk1.LegacyStruct] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[struct {
						Hello string
						World int
					}]](js.DecoderMap(
						js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString), js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]())),
						func(t fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]]) struct {
							Hello string
							World int
						} {
							return struct {
								Hello string
								World int
							}{Hello: t.I1.Value(), World: t.I2.Value()}
						},
					)),
					js.DecoderHNil,
				),
			),
		),

		fp.Compose(
			product.LabelledFromHList3,
			func(t fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
				Hello string
				World int
			}]]) testpk1.LegacyStruct {
				return testpk1.LegacyStruct{Name: t.I1.Value(), Age: t.I2.Value(), NoName: t.I3.Value()}
			},
		),
	)
}

func MonoidTestpk1LegacyStructCompose() fp.Monoid[testpk1.LegacyStructCompose] {
	return monoid.IMap(
		monoid.Tuple2(MonoidTestpk1LegacyStruct(), monoid.String),
		func(t fp.Tuple2[testpk1.LegacyStruct, string]) testpk1.LegacyStructCompose {
			return testpk1.LegacyStructCompose{
				Person: t.I1,
				Phone:  t.I2,
			}
		},
		func(v testpk1.LegacyStructCompose) fp.Tuple2[testpk1.LegacyStruct, string] {
			return fp.Tuple2[testpk1.LegacyStruct, string]{
				I1: v.Person,
				I2: v.Phone,
			}
		},
	)
}

func EqTestpk1LegacyPhoneBook() fp.Eq[testpk1.LegacyPhoneBook] {
	return eq.ContraMap(
		eq.Tuple2(eq.Given[testpk1.LegacyPerson](), eq.String),
		func(v testpk1.LegacyPhoneBook) fp.Tuple2[testpk1.LegacyPerson, string] {
			return fp.Tuple2[testpk1.LegacyPerson, string]{
				I1: v.Person,
				I2: v.Phone,
			}
		},
	)
}

func MonoidTestpk1LegacyPhoneBook() fp.Monoid[testpk1.LegacyPhoneBook] {
	return monoid.IMap(
		monoid.Tuple2(MonoidTestpk1LegacyPerson(), monoid.String),
		func(t fp.Tuple2[testpk1.LegacyPerson, string]) testpk1.LegacyPhoneBook {
			return testpk1.LegacyPhoneBook{
				Person: t.I1,
				Phone:  t.I2,
			}
		},
		func(v testpk1.LegacyPhoneBook) fp.Tuple2[testpk1.LegacyPerson, string] {
			return fp.Tuple2[testpk1.LegacyPerson, string]{
				I1: v.Person,
				I2: v.Phone,
			}
		},
	)
}

func ShowTestpk1LegacyPhoneBook() fp.Show[testpk1.LegacyPhoneBook] {
	return show.Generic(
		fp.Generic[testpk1.LegacyPhoneBook, hlist.Cons[testpk1.LegacyPerson, hlist.Cons[string, hlist.Nil]]]{
			Type: "testpk1.LegacyPhoneBook",
			Kind: "Struct",
			To: func(v testpk1.LegacyPhoneBook) hlist.Cons[testpk1.LegacyPerson, hlist.Cons[string, hlist.Nil]] {
				i0, i1 := v.Person, v.Phone
				h2 := hlist.Empty()
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[testpk1.LegacyPerson, hlist.Cons[string, hlist.Nil]]) testpk1.LegacyPhoneBook {
				i0, hl1 := hlist.Unapply(hl0)
				i1 := hlist.Head(hl1)
				return testpk1.LegacyPhoneBook{Person: i0, Phone: i1}
			},
		},
		show.StructHCons(
			show.Given[testpk1.LegacyPerson](),
			show.StructHCons(
				show.String,
				show.HNil,
			),
		),
	)
}

func EncoderTestpk1LegacyPhoneBook() js.Encoder[testpk1.LegacyPhoneBook] {
	return js.EncoderContraMap(
		js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[testpk1.LegacyPerson]](js.EncoderGiven[testpk1.LegacyPerson]()), js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString)),
		func(v testpk1.LegacyPhoneBook) fp.Labelled2[fp.RuntimeNamed[testpk1.LegacyPerson], fp.RuntimeNamed[string]] {
			i0, i1 := v.Person, v.Phone
			return as.Labelled2(as.NamedWithTag("Person", i0, ``), as.NamedWithTag("Phone", i1, ``))
		},
	)
}

func DecoderTestpk1LegacyPhoneBook() js.Decoder[testpk1.LegacyPhoneBook] {
	return js.DecoderMap(
		js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[testpk1.LegacyPerson]](js.DecoderGiven[testpk1.LegacyPerson]()), js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString)),
		func(t fp.Labelled2[fp.RuntimeNamed[testpk1.LegacyPerson], fp.RuntimeNamed[string]]) testpk1.LegacyPhoneBook {
			return testpk1.LegacyPhoneBook{Person: t.I1.Value(), Phone: t.I2.Value()}
		},
	)
}

func EqLocalPhoneBook() fp.Eq[LocalPhoneBook] {
	return eq.ContraMap(
		eq.Tuple3(eq.Given[LocalPerson](), eq.String, eq.Given[StringAlias]()),
		func(v LocalPhoneBook) fp.Tuple3[LocalPerson, string, StringAlias] {
			return fp.Tuple3[LocalPerson, string, StringAlias]{
				I1: v.Person,
				I2: v.Phone,
				I3: v.Alias,
			}
		},
	)
}

func MonoidLocalPhoneBook() fp.Monoid[LocalPhoneBook] {
	return monoid.IMap(
		monoid.Tuple3(MonoidLocalPerson(), monoid.String, monoid.Sum[StringAlias]()),
		func(t fp.Tuple3[LocalPerson, string, StringAlias]) LocalPhoneBook {
			return LocalPhoneBook{
				Person: t.I1,
				Phone:  t.I2,
				Alias:  t.I3,
			}
		},
		func(v LocalPhoneBook) fp.Tuple3[LocalPerson, string, StringAlias] {
			return fp.Tuple3[LocalPerson, string, StringAlias]{
				I1: v.Person,
				I2: v.Phone,
				I3: v.Alias,
			}
		},
	)
}

func ShowLocalPhoneBook() fp.Show[LocalPhoneBook] {
	return show.Generic(
		fp.Generic[LocalPhoneBook, hlist.Cons[LocalPerson, hlist.Cons[string, hlist.Cons[StringAlias, hlist.Nil]]]]{
			Type: "recursive.LocalPhoneBook",
			Kind: "Struct",
			To: func(v LocalPhoneBook) hlist.Cons[LocalPerson, hlist.Cons[string, hlist.Cons[StringAlias, hlist.Nil]]] {
				i0, i1, i2 := v.Person, v.Phone, v.Alias
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[LocalPerson, hlist.Cons[string, hlist.Cons[StringAlias, hlist.Nil]]]) LocalPhoneBook {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return LocalPhoneBook{Person: i0, Phone: i1, Alias: i2}
			},
		},
		show.StructHCons(
			show.Given[LocalPerson](),
			show.StructHCons(
				show.String,
				show.StructHCons(
					show.Given[StringAlias](),
					show.HNil,
				),
			),
		),
	)
}

func EncoderLocalPhoneBook() js.Encoder[LocalPhoneBook] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[LocalPerson]](js.EncoderGiven[LocalPerson]()),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[StringAlias]](js.EncoderGiven[StringAlias]()),
					js.EncoderHNil,
				),
			),
		),
		fp.Compose(
			func(v LocalPhoneBook) fp.Labelled3[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]] {
				i0, i1, i2 := v.Person, v.Phone, v.Alias
				return as.Labelled3(as.NamedWithTag("Person", i0, ``), as.NamedWithTag("Phone", i1, ``), as.NamedWithTag("Alias", i2, ``))
			},
			as.HList3Labelled,
		),
	)
}

func DecoderLocalPhoneBook() js.Decoder[LocalPhoneBook] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[LocalPerson]](js.DecoderGiven[LocalPerson]()),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[StringAlias]](js.DecoderGiven[StringAlias]()),
					js.DecoderHNil,
				),
			),
		),

		fp.Compose(
			product.LabelledFromHList3,
			func(t fp.Labelled3[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]]) LocalPhoneBook {
				return LocalPhoneBook{Person: t.I1.Value(), Phone: t.I2.Value(), Alias: t.I3.Value()}
			},
		),
	)
}

func MonoidTestpk1LegacyPerson() fp.Monoid[testpk1.LegacyPerson] {
	return monoid.IMap(
		monoid.Tuple2(monoid.String, monoid.Product[int]()),
		func(t fp.Tuple2[string, int]) testpk1.LegacyPerson {
			return testpk1.LegacyPerson{
				Name: t.I1,
				Age:  t.I2,
			}
		},
		func(v testpk1.LegacyPerson) fp.Tuple2[string, int] {
			return fp.Tuple2[string, int]{
				I1: v.Name,
				I2: v.Age,
			}
		},
	)
}

func MonoidLocalPerson() fp.Monoid[LocalPerson] {
	return monoid.IMap(
		monoid.Tuple2(monoid.String, monoid.Product[int]()),
		func(t fp.Tuple2[string, int]) LocalPerson {
			return LocalPerson{
				Name: t.I1,
				age:  t.I2,
			}
		},
		func(v LocalPerson) fp.Tuple2[string, int] {
			return fp.Tuple2[string, int]{
				I1: v.Name,
				I2: v.age,
			}
		},
	)
}
