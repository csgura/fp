// Code generated by gombok, DO NOT EDIT.
package recursive

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hlist"
	"github.com/csgura/fp/monoid"
	"github.com/csgura/fp/product"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/show"
	"github.com/csgura/fp/test/internal/testpk1"
)

var EqNormalStruct = eq.ContraMap(
	eq.Tuple3(eq.String, eq.Given[int](), eq.String),
	func(v NormalStruct) fp.Tuple3[string, int, string] {
		return as.Tuple3(v.Name, v.Age, v.Address)
	},
)

var MonoidNormalStruct = monoid.IMap(
	monoid.Tuple3(monoid.String, monoid.Product[int](), monoid.String),
	func(t fp.Tuple3[string, int, string]) NormalStruct {
		return NormalStruct{
			Name:    t.I1,
			Age:     t.I2,
			Address: t.I3,
		}
	},
	func(v NormalStruct) fp.Tuple3[string, int, string] {
		return as.Tuple3(v.Name, v.Age, v.Address)
	},
)

var ShowNormalStruct = show.Generic(
	as.Generic(
		"recursive.NormalStruct",
		"Struct",
		fp.Compose(
			func(v NormalStruct) fp.Tuple3[string, int, string] {
				return as.Tuple3(v.Name, v.Age, v.Address)
			},
			as.HList3[string, int, string],
		),

		fp.Compose(
			product.TupleFromHList3[string, int, string],
			func(t fp.Tuple3[string, int, string]) NormalStruct {
				return NormalStruct{
					Name:    t.I1,
					Age:     t.I2,
					Address: t.I3,
				}
			},
		),
	),
	show.StructHCons(
		show.String,
		show.StructHCons(
			show.Int[int](),
			show.StructHCons(
				show.String,
				show.HNil,
			),
		),
	),
)

var EncoderNormalStruct = js.EncoderContraMap(
	js.EncoderHConsLabelled(
		js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
				js.EncoderHNil,
			),
		),
	),
	fp.Compose(
		func(v NormalStruct) fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]] {
			i0, i1, i2 := v.Name, v.Age, v.Address
			return as.Labelled3(fp.RuntimeNamed[string]{I1: "Name", I2: i0}, fp.RuntimeNamed[int]{I1: "Age", I2: i1}, fp.RuntimeNamed[string]{I1: "Address", I2: i2})
		},
		as.HList3Labelled[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]],
	),
)

var DecoderNormalStruct = js.DecoderMap(
	js.DecoderHConsLabelled(
		js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
				js.DecoderHNil,
			),
		),
	),

	fp.Compose(
		product.LabelledFromHList3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]],
		func(t fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[string]]) NormalStruct {
			return NormalStruct{Name: t.I1.Value(), Age: t.I2.Value(), Address: t.I3.Value()}
		},
	),
)

var ShowTuple2Struct = show.Generic(
	as.Generic(
		"recursive.Tuple2Struct",
		"Struct",
		fp.Compose(
			func(v Tuple2Struct) fp.Tuple2[string, int] {
				return as.Tuple2(v.Name, v.Age)
			},
			as.HList2[string, int],
		),

		fp.Compose(
			product.TupleFromHList2[string, int],
			func(t fp.Tuple2[string, int]) Tuple2Struct {
				return Tuple2Struct{
					Name: t.I1,
					Age:  t.I2,
				}
			},
		),
	),
	show.StructHCons(
		show.String,
		show.StructHCons(
			show.Int[int](),
			show.HNil,
		),
	),
)

var EncoderTuple2Struct = js.EncoderContraMap(
	js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString), js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]())),
	func(v Tuple2Struct) fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]] {
		i0, i1 := v.Name, v.Age
		return as.Labelled2(fp.RuntimeNamed[string]{I1: "Name", I2: i0}, fp.RuntimeNamed[int]{I1: "Age", I2: i1})
	},
)

var DecoderTuple2Struct = js.DecoderMap(
	js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString), js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]())),
	func(t fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]]) Tuple2Struct {
		return Tuple2Struct{Name: t.I1.Value(), Age: t.I2.Value()}
	},
)

func EqOver21[T any](eqT fp.Eq[T]) fp.Eq[Over21[T]] {
	return eq.ContraMap(
		eq.HCons(
			eqT,
			eq.HCons(
				eq.Given[int](),
				eq.HCons(
					eq.Given[int](),
					eq.HCons(
						eq.Given[int](),
						eq.HCons(
							eq.Given[int](),
							eq.HCons(
								eq.Given[int](),
								eq.HCons(
									eq.Given[int](),
									eq.HCons(
										eq.Given[int](),
										eq.HCons(
											eq.Given[int](),
											eq.HCons(
												eq.Given[int](),
												eq.HCons(
													eq.Given[int](),
													eq.HCons(
														eq.Given[int](),
														eq.HCons(
															eq.Given[int](),
															eq.HCons(
																eq.Given[int](),
																eq.HCons(
																	eq.Given[int](),
																	eq.HCons(
																		eq.Given[int](),
																		eq.HCons(
																			eq.Given[int](),
																			eq.HCons(
																				eq.Given[int](),
																				eq.HCons(
																					eq.Given[int](),
																					eq.HCons(
																						eq.Given[int](),
																						eq.HCons(
																							eq.Given[int](),
																							eq.HCons(
																								eq.Given[int](),
																								eq.HCons(
																									eq.Given[int](),
																									eq.HCons(
																										eq.Given[int](),
																										eq.HCons(
																											eq.Given[int](),
																											eq.HCons(
																												eq.Given[int](),
																												eq.HCons(
																													eq.Given[int](),
																													eq.HCons(
																														eq.Given[int](),
																														eq.HCons(
																															eq.Given[int](),
																															eq.HCons(
																																eq.Given[int](),
																																eq.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			return hlist.Concat(i0,
				hlist.Concat(i1,
					hlist.Concat(i2,
						hlist.Concat(i3,
							hlist.Concat(i4,
								hlist.Concat(i5,
									hlist.Concat(i6,
										hlist.Concat(i7,
											hlist.Concat(i8,
												hlist.Concat(i9,
													hlist.Concat(i10,
														hlist.Concat(i11,
															hlist.Concat(i12,
																hlist.Concat(i13,
																	hlist.Concat(i14,
																		hlist.Concat(i15,
																			hlist.Concat(i16,
																				hlist.Concat(i17,
																					hlist.Concat(i18,
																						hlist.Concat(i19,
																							hlist.Concat(i20,
																								hlist.Concat(i21,
																									hlist.Concat(i22,
																										hlist.Concat(i23,
																											hlist.Concat(i24,
																												hlist.Concat(i25,
																													hlist.Concat(i26,
																														hlist.Concat(i27,
																															hlist.Concat(i28,
																																hlist.Concat(i29,
																																	hlist.Empty(),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			)
		},
	)
}

func MonoidOver21[T any](monoidT fp.Monoid[T]) fp.Monoid[Over21[T]] {
	return monoid.IMap(
		monoid.HCons(
			monoidT,
			monoid.HCons(
				monoid.Product[int](),
				monoid.HCons(
					monoid.Product[int](),
					monoid.HCons(
						monoid.Product[int](),
						monoid.HCons(
							monoid.Product[int](),
							monoid.HCons(
								monoid.Product[int](),
								monoid.HCons(
									monoid.Product[int](),
									monoid.HCons(
										monoid.Product[int](),
										monoid.HCons(
											monoid.Product[int](),
											monoid.HCons(
												monoid.Product[int](),
												monoid.HCons(
													monoid.Product[int](),
													monoid.HCons(
														monoid.Product[int](),
														monoid.HCons(
															monoid.Product[int](),
															monoid.HCons(
																monoid.Product[int](),
																monoid.HCons(
																	monoid.Product[int](),
																	monoid.HCons(
																		monoid.Product[int](),
																		monoid.HCons(
																			monoid.Product[int](),
																			monoid.HCons(
																				monoid.Product[int](),
																				monoid.HCons(
																					monoid.Product[int](),
																					monoid.HCons(
																						monoid.Product[int](),
																						monoid.HCons(
																							monoid.Product[int](),
																							monoid.HCons(
																								monoid.Product[int](),
																								monoid.HCons(
																									monoid.Product[int](),
																									monoid.HCons(
																										monoid.Product[int](),
																										monoid.HCons(
																											monoid.Product[int](),
																											monoid.HCons(
																												monoid.Product[int](),
																												monoid.HCons(
																													monoid.Product[int](),
																													monoid.HCons(
																														monoid.Product[int](),
																														monoid.HCons(
																															monoid.Product[int](),
																															monoid.HCons(
																																monoid.Product[int](),
																																monoid.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hl29.Head()
			return Over21[T]{I1: i0, I2: i1, I3: i2, I4: i3, I5: i4, I6: i5, I7: i6, I8: i7, I9: i8, I10: i9, I11: i10, I12: i11, I13: i12, I14: i13, I15: i14, I16: i15, I17: i16, I18: i17, I19: i18, I20: i19, I21: i20, I22: i21, I23: i22, I24: i23, I25: i24, I26: i25, I27: i26, I28: i27, I29: i28, I30: i29}
		},
		func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			return hlist.Concat(i0,
				hlist.Concat(i1,
					hlist.Concat(i2,
						hlist.Concat(i3,
							hlist.Concat(i4,
								hlist.Concat(i5,
									hlist.Concat(i6,
										hlist.Concat(i7,
											hlist.Concat(i8,
												hlist.Concat(i9,
													hlist.Concat(i10,
														hlist.Concat(i11,
															hlist.Concat(i12,
																hlist.Concat(i13,
																	hlist.Concat(i14,
																		hlist.Concat(i15,
																			hlist.Concat(i16,
																				hlist.Concat(i17,
																					hlist.Concat(i18,
																						hlist.Concat(i19,
																							hlist.Concat(i20,
																								hlist.Concat(i21,
																									hlist.Concat(i22,
																										hlist.Concat(i23,
																											hlist.Concat(i24,
																												hlist.Concat(i25,
																													hlist.Concat(i26,
																														hlist.Concat(i27,
																															hlist.Concat(i28,
																																hlist.Concat(i29,
																																	hlist.Empty(),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			)
		},
	)
}

func ShowOver21[T any](showT fp.Show[T]) fp.Show[Over21[T]] {
	return show.Generic(
		as.Generic(
			"recursive.Over21",
			"Struct",
			func(v Over21[T]) hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
				i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
				return hlist.Concat(i0,
					hlist.Concat(i1,
						hlist.Concat(i2,
							hlist.Concat(i3,
								hlist.Concat(i4,
									hlist.Concat(i5,
										hlist.Concat(i6,
											hlist.Concat(i7,
												hlist.Concat(i8,
													hlist.Concat(i9,
														hlist.Concat(i10,
															hlist.Concat(i11,
																hlist.Concat(i12,
																	hlist.Concat(i13,
																		hlist.Concat(i14,
																			hlist.Concat(i15,
																				hlist.Concat(i16,
																					hlist.Concat(i17,
																						hlist.Concat(i18,
																							hlist.Concat(i19,
																								hlist.Concat(i20,
																									hlist.Concat(i21,
																										hlist.Concat(i22,
																											hlist.Concat(i23,
																												hlist.Concat(i24,
																													hlist.Concat(i25,
																														hlist.Concat(i26,
																															hlist.Concat(i27,
																																hlist.Concat(i28,
																																	hlist.Concat(i29,
																																		hlist.Empty(),
																																	),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				)
			},
			func(hl0 hlist.Cons[T, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Cons[int, hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2, hl3 := hlist.Unapply(hl2)
				i3, hl4 := hlist.Unapply(hl3)
				i4, hl5 := hlist.Unapply(hl4)
				i5, hl6 := hlist.Unapply(hl5)
				i6, hl7 := hlist.Unapply(hl6)
				i7, hl8 := hlist.Unapply(hl7)
				i8, hl9 := hlist.Unapply(hl8)
				i9, hl10 := hlist.Unapply(hl9)
				i10, hl11 := hlist.Unapply(hl10)
				i11, hl12 := hlist.Unapply(hl11)
				i12, hl13 := hlist.Unapply(hl12)
				i13, hl14 := hlist.Unapply(hl13)
				i14, hl15 := hlist.Unapply(hl14)
				i15, hl16 := hlist.Unapply(hl15)
				i16, hl17 := hlist.Unapply(hl16)
				i17, hl18 := hlist.Unapply(hl17)
				i18, hl19 := hlist.Unapply(hl18)
				i19, hl20 := hlist.Unapply(hl19)
				i20, hl21 := hlist.Unapply(hl20)
				i21, hl22 := hlist.Unapply(hl21)
				i22, hl23 := hlist.Unapply(hl22)
				i23, hl24 := hlist.Unapply(hl23)
				i24, hl25 := hlist.Unapply(hl24)
				i25, hl26 := hlist.Unapply(hl25)
				i26, hl27 := hlist.Unapply(hl26)
				i27, hl28 := hlist.Unapply(hl27)
				i28, hl29 := hlist.Unapply(hl28)
				i29 := hl29.Head()
				return Over21[T]{I1: i0, I2: i1, I3: i2, I4: i3, I5: i4, I6: i5, I7: i6, I8: i7, I9: i8, I10: i9, I11: i10, I12: i11, I13: i12, I14: i13, I15: i14, I16: i15, I17: i16, I18: i17, I19: i18, I20: i19, I21: i20, I22: i21, I23: i22, I24: i23, I25: i24, I26: i25, I27: i26, I28: i27, I29: i28, I30: i29}
			},
		),
		show.StructHCons(
			showT,
			show.StructHCons(
				show.Int[int](),
				show.StructHCons(
					show.Int[int](),
					show.StructHCons(
						show.Int[int](),
						show.StructHCons(
							show.Int[int](),
							show.StructHCons(
								show.Int[int](),
								show.StructHCons(
									show.Int[int](),
									show.StructHCons(
										show.Int[int](),
										show.StructHCons(
											show.Int[int](),
											show.StructHCons(
												show.Int[int](),
												show.StructHCons(
													show.Int[int](),
													show.StructHCons(
														show.Int[int](),
														show.StructHCons(
															show.Int[int](),
															show.StructHCons(
																show.Int[int](),
																show.StructHCons(
																	show.Int[int](),
																	show.StructHCons(
																		show.Int[int](),
																		show.StructHCons(
																			show.Int[int](),
																			show.StructHCons(
																				show.Int[int](),
																				show.StructHCons(
																					show.Int[int](),
																					show.StructHCons(
																						show.Int[int](),
																						show.StructHCons(
																							show.Int[int](),
																							show.StructHCons(
																								show.Int[int](),
																								show.StructHCons(
																									show.Int[int](),
																									show.StructHCons(
																										show.Int[int](),
																										show.StructHCons(
																											show.Int[int](),
																											show.StructHCons(
																												show.Int[int](),
																												show.StructHCons(
																													show.Int[int](),
																													show.StructHCons(
																														show.Int[int](),
																														show.StructHCons(
																															show.Int[int](),
																															show.StructHCons(
																																show.Int[int](),
																																show.HNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
	)
}

func EncoderOver21[T any](encoderT js.Encoder[T]) js.Encoder[Over21[T]] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[T]](encoderT),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
				js.EncoderHConsLabelled(
					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
					js.EncoderHConsLabelled(
						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
						js.EncoderHConsLabelled(
							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
							js.EncoderHConsLabelled(
								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
								js.EncoderHConsLabelled(
									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
									js.EncoderHConsLabelled(
										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
										js.EncoderHConsLabelled(
											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
											js.EncoderHConsLabelled(
												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
												js.EncoderHConsLabelled(
													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
													js.EncoderHConsLabelled(
														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
														js.EncoderHConsLabelled(
															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
															js.EncoderHConsLabelled(
																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																js.EncoderHConsLabelled(
																	js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																	js.EncoderHConsLabelled(
																		js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																		js.EncoderHConsLabelled(
																			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																			js.EncoderHConsLabelled(
																				js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																				js.EncoderHConsLabelled(
																					js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																					js.EncoderHConsLabelled(
																						js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																						js.EncoderHConsLabelled(
																							js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																							js.EncoderHConsLabelled(
																								js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																								js.EncoderHConsLabelled(
																									js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																									js.EncoderHConsLabelled(
																										js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																										js.EncoderHConsLabelled(
																											js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																											js.EncoderHConsLabelled(
																												js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																												js.EncoderHConsLabelled(
																													js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																													js.EncoderHConsLabelled(
																														js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																														js.EncoderHConsLabelled(
																															js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																															js.EncoderHConsLabelled(
																																js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
																																js.EncoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(v Over21[T]) hlist.Cons[fp.RuntimeNamed[T], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] {
			i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29 := v.I1, v.I2, v.I3, v.I4, v.I5, v.I6, v.I7, v.I8, v.I9, v.I10, v.I11, v.I12, v.I13, v.I14, v.I15, v.I16, v.I17, v.I18, v.I19, v.I20, v.I21, v.I22, v.I23, v.I24, v.I25, v.I26, v.I27, v.I28, v.I29, v.I30
			return hlist.Concat(fp.RuntimeNamed[T]{I1: "I1", I2: i0},
				hlist.Concat(fp.RuntimeNamed[int]{I1: "I2", I2: i1},
					hlist.Concat(fp.RuntimeNamed[int]{I1: "I3", I2: i2},
						hlist.Concat(fp.RuntimeNamed[int]{I1: "I4", I2: i3},
							hlist.Concat(fp.RuntimeNamed[int]{I1: "I5", I2: i4},
								hlist.Concat(fp.RuntimeNamed[int]{I1: "I6", I2: i5},
									hlist.Concat(fp.RuntimeNamed[int]{I1: "I7", I2: i6},
										hlist.Concat(fp.RuntimeNamed[int]{I1: "I8", I2: i7},
											hlist.Concat(fp.RuntimeNamed[int]{I1: "I9", I2: i8},
												hlist.Concat(fp.RuntimeNamed[int]{I1: "I10", I2: i9},
													hlist.Concat(fp.RuntimeNamed[int]{I1: "I11", I2: i10},
														hlist.Concat(fp.RuntimeNamed[int]{I1: "I12", I2: i11},
															hlist.Concat(fp.RuntimeNamed[int]{I1: "I13", I2: i12},
																hlist.Concat(fp.RuntimeNamed[int]{I1: "I14", I2: i13},
																	hlist.Concat(fp.RuntimeNamed[int]{I1: "I15", I2: i14},
																		hlist.Concat(fp.RuntimeNamed[int]{I1: "I16", I2: i15},
																			hlist.Concat(fp.RuntimeNamed[int]{I1: "I17", I2: i16},
																				hlist.Concat(fp.RuntimeNamed[int]{I1: "I18", I2: i17},
																					hlist.Concat(fp.RuntimeNamed[int]{I1: "I19", I2: i18},
																						hlist.Concat(fp.RuntimeNamed[int]{I1: "I20", I2: i19},
																							hlist.Concat(fp.RuntimeNamed[int]{I1: "I21", I2: i20},
																								hlist.Concat(fp.RuntimeNamed[int]{I1: "I22", I2: i21},
																									hlist.Concat(fp.RuntimeNamed[int]{I1: "I23", I2: i22},
																										hlist.Concat(fp.RuntimeNamed[int]{I1: "I24", I2: i23},
																											hlist.Concat(fp.RuntimeNamed[int]{I1: "I25", I2: i24},
																												hlist.Concat(fp.RuntimeNamed[int]{I1: "I26", I2: i25},
																													hlist.Concat(fp.RuntimeNamed[int]{I1: "I27", I2: i26},
																														hlist.Concat(fp.RuntimeNamed[int]{I1: "I28", I2: i27},
																															hlist.Concat(fp.RuntimeNamed[int]{I1: "I29", I2: i28},
																																hlist.Concat(fp.RuntimeNamed[int]{I1: "I30", I2: i29},
																																	hlist.Empty(),
																																),
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			)
		},
	)
}

func DecoderOver21[T any](decoderT js.Decoder[T]) js.Decoder[Over21[T]] {
	return js.DecoderMap(
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[T]](decoderT),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
				js.DecoderHConsLabelled(
					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
					js.DecoderHConsLabelled(
						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
						js.DecoderHConsLabelled(
							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
							js.DecoderHConsLabelled(
								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
								js.DecoderHConsLabelled(
									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
									js.DecoderHConsLabelled(
										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
										js.DecoderHConsLabelled(
											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
											js.DecoderHConsLabelled(
												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
												js.DecoderHConsLabelled(
													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
													js.DecoderHConsLabelled(
														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
														js.DecoderHConsLabelled(
															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
															js.DecoderHConsLabelled(
																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																js.DecoderHConsLabelled(
																	js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																	js.DecoderHConsLabelled(
																		js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																		js.DecoderHConsLabelled(
																			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																			js.DecoderHConsLabelled(
																				js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																				js.DecoderHConsLabelled(
																					js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																					js.DecoderHConsLabelled(
																						js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																						js.DecoderHConsLabelled(
																							js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																							js.DecoderHConsLabelled(
																								js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																								js.DecoderHConsLabelled(
																									js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																									js.DecoderHConsLabelled(
																										js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																										js.DecoderHConsLabelled(
																											js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																											js.DecoderHConsLabelled(
																												js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																												js.DecoderHConsLabelled(
																													js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																													js.DecoderHConsLabelled(
																														js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																														js.DecoderHConsLabelled(
																															js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																															js.DecoderHConsLabelled(
																																js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
																																js.DecoderHNil,
																															),
																														),
																													),
																												),
																											),
																										),
																									),
																								),
																							),
																						),
																					),
																				),
																			),
																		),
																	),
																),
															),
														),
													),
												),
											),
										),
									),
								),
							),
						),
					),
				),
			),
		),
		func(hl0 hlist.Cons[fp.RuntimeNamed[T], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Cons[fp.RuntimeNamed[int], hlist.Nil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]) Over21[T] {
			i0, hl1 := hlist.Unapply(hl0)
			i1, hl2 := hlist.Unapply(hl1)
			i2, hl3 := hlist.Unapply(hl2)
			i3, hl4 := hlist.Unapply(hl3)
			i4, hl5 := hlist.Unapply(hl4)
			i5, hl6 := hlist.Unapply(hl5)
			i6, hl7 := hlist.Unapply(hl6)
			i7, hl8 := hlist.Unapply(hl7)
			i8, hl9 := hlist.Unapply(hl8)
			i9, hl10 := hlist.Unapply(hl9)
			i10, hl11 := hlist.Unapply(hl10)
			i11, hl12 := hlist.Unapply(hl11)
			i12, hl13 := hlist.Unapply(hl12)
			i13, hl14 := hlist.Unapply(hl13)
			i14, hl15 := hlist.Unapply(hl14)
			i15, hl16 := hlist.Unapply(hl15)
			i16, hl17 := hlist.Unapply(hl16)
			i17, hl18 := hlist.Unapply(hl17)
			i18, hl19 := hlist.Unapply(hl18)
			i19, hl20 := hlist.Unapply(hl19)
			i20, hl21 := hlist.Unapply(hl20)
			i21, hl22 := hlist.Unapply(hl21)
			i22, hl23 := hlist.Unapply(hl22)
			i23, hl24 := hlist.Unapply(hl23)
			i24, hl25 := hlist.Unapply(hl24)
			i25, hl26 := hlist.Unapply(hl25)
			i26, hl27 := hlist.Unapply(hl26)
			i27, hl28 := hlist.Unapply(hl27)
			i28, hl29 := hlist.Unapply(hl28)
			i29 := hl29.Head()
			return Over21[T]{I1: i0.Value(), I2: i1.Value(), I3: i2.Value(), I4: i3.Value(), I5: i4.Value(), I6: i5.Value(), I7: i6.Value(), I8: i7.Value(), I9: i8.Value(), I10: i9.Value(), I11: i10.Value(), I12: i11.Value(), I13: i12.Value(), I14: i13.Value(), I15: i14.Value(), I16: i15.Value(), I17: i16.Value(), I18: i17.Value(), I19: i18.Value(), I20: i19.Value(), I21: i20.Value(), I22: i21.Value(), I23: i22.Value(), I24: i23.Value(), I25: i24.Value(), I26: i25.Value(), I27: i26.Value(), I28: i27.Value(), I29: i28.Value(), I30: i29.Value()}
		},
	)
}

var EqTestpk1LegacyStruct = eq.ContraMap(
	eq.Tuple3(eq.String, eq.Given[int](), eq.ContraMap(
		eq.Tuple2(eq.String, eq.Given[int]()),
		func(v struct {
			Hello string
			World int
		}) fp.Tuple2[string, int] {
			return as.Tuple2(v.Hello, v.World)
		},
	)),
	func(v testpk1.LegacyStruct) fp.Tuple3[string, int, struct {
		Hello string
		World int
	}] {
		return as.Tuple3(v.Name, v.Age, v.NoName)
	},
)

var MonoidTestpk1LegacyStruct = monoid.IMap(
	monoid.Tuple3(monoid.String, monoid.Product[int](), monoid.IMap(
		monoid.Tuple2(monoid.String, monoid.Product[int]()),
		func(t fp.Tuple2[string, int]) struct {
			Hello string
			World int
		} {
			return struct {
				Hello string
				World int
			}{
				Hello: t.I1,
				World: t.I2,
			}
		},
		func(v struct {
			Hello string
			World int
		}) fp.Tuple2[string, int] {
			return as.Tuple2(v.Hello, v.World)
		},
	)),
	func(t fp.Tuple3[string, int, struct {
		Hello string
		World int
	}]) testpk1.LegacyStruct {
		return testpk1.LegacyStruct{
			Name:   t.I1,
			Age:    t.I2,
			NoName: t.I3,
		}
	},
	func(v testpk1.LegacyStruct) fp.Tuple3[string, int, struct {
		Hello string
		World int
	}] {
		return as.Tuple3(v.Name, v.Age, v.NoName)
	},
)

var ShowTestpk1LegacyStruct = show.Generic(
	as.Generic(
		"testpk1.LegacyStruct",
		"Struct",
		fp.Compose(
			func(v testpk1.LegacyStruct) fp.Tuple3[string, int, struct {
				Hello string
				World int
			}] {
				return as.Tuple3(v.Name, v.Age, v.NoName)
			},
			as.HList3[string, int, struct {
				Hello string
				World int
			}],
		),

		fp.Compose(
			product.TupleFromHList3[string, int, struct {
				Hello string
				World int
			}],
			func(t fp.Tuple3[string, int, struct {
				Hello string
				World int
			}]) testpk1.LegacyStruct {
				return testpk1.LegacyStruct{
					Name:   t.I1,
					Age:    t.I2,
					NoName: t.I3,
				}
			},
		),
	),
	show.StructHCons(
		show.String,
		show.StructHCons(
			show.Int[int](),
			show.StructHCons(
				show.Generic(
					as.Generic(
						"struct",
						"Struct",
						fp.Compose(
							func(v struct {
								Hello string
								World int
							}) fp.Tuple2[string, int] {
								return as.Tuple2(v.Hello, v.World)
							},
							as.HList2[string, int],
						),

						fp.Compose(
							product.TupleFromHList2[string, int],
							func(t fp.Tuple2[string, int]) struct {
								Hello string
								World int
							} {
								return struct {
									Hello string
									World int
								}{
									Hello: t.I1,
									World: t.I2,
								}
							},
						),
					),
					show.StructHCons(
						show.String,
						show.StructHCons(
							show.Int[int](),
							show.HNil,
						),
					),
				),
				show.HNil,
			),
		),
	),
)

var EncoderTestpk1LegacyStruct = js.EncoderContraMap(
	js.EncoderHConsLabelled(
		js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]()),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[struct {
					Hello string
					World int
				}]](js.EncoderContraMap(
					js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString), js.EncoderNamed[fp.RuntimeNamed[int]](js.EncoderNumber[int]())),
					func(v struct {
						Hello string
						World int
					}) fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]] {
						i0, i1 := v.Hello, v.World
						return as.Labelled2(fp.RuntimeNamed[string]{I1: "Hello", I2: i0}, fp.RuntimeNamed[int]{I1: "World", I2: i1})
					},
				)),
				js.EncoderHNil,
			),
		),
	),
	fp.Compose(
		func(v testpk1.LegacyStruct) fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
			Hello string
			World int
		}]] {
			i0, i1, i2 := v.Name, v.Age, v.NoName
			return as.Labelled3(fp.RuntimeNamed[string]{I1: "Name", I2: i0}, fp.RuntimeNamed[int]{I1: "Age", I2: i1}, fp.RuntimeNamed[struct {
				Hello string
				World int
			}]{I1: "NoName", I2: i2})
		},
		as.HList3Labelled[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
			Hello string
			World int
		}]],
	),
)

var DecoderTestpk1LegacyStruct = js.DecoderMap(
	js.DecoderHConsLabelled(
		js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]()),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[struct {
					Hello string
					World int
				}]](js.DecoderMap(
					js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString), js.DecoderNamed[fp.RuntimeNamed[int]](js.DecoderNumber[int]())),
					func(t fp.Labelled2[fp.RuntimeNamed[string], fp.RuntimeNamed[int]]) struct {
						Hello string
						World int
					} {
						return struct {
							Hello string
							World int
						}{Hello: t.I1.Value(), World: t.I2.Value()}
					},
				)),
				js.DecoderHNil,
			),
		),
	),

	fp.Compose(
		product.LabelledFromHList3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
			Hello string
			World int
		}]],
		func(t fp.Labelled3[fp.RuntimeNamed[string], fp.RuntimeNamed[int], fp.RuntimeNamed[struct {
			Hello string
			World int
		}]]) testpk1.LegacyStruct {
			return testpk1.LegacyStruct{Name: t.I1.Value(), Age: t.I2.Value(), NoName: t.I3.Value()}
		},
	),
)

var MonoidTestpk1LegacyStructCompose = monoid.IMap(
	monoid.Tuple2(MonoidTestpk1LegacyStruct, monoid.String),
	func(t fp.Tuple2[testpk1.LegacyStruct, string]) testpk1.LegacyStructCompose {
		return testpk1.LegacyStructCompose{
			Person: t.I1,
			Phone:  t.I2,
		}
	},
	func(v testpk1.LegacyStructCompose) fp.Tuple2[testpk1.LegacyStruct, string] {
		return as.Tuple2(v.Person, v.Phone)
	},
)

var EqTestpk1LegacyPhoneBook = eq.ContraMap(
	eq.Tuple2(eq.Given[testpk1.LegacyPerson](), eq.String),
	func(v testpk1.LegacyPhoneBook) fp.Tuple2[testpk1.LegacyPerson, string] {
		return as.Tuple2(v.Person, v.Phone)
	},
)

var MonoidTestpk1LegacyPhoneBook = monoid.IMap(
	monoid.Tuple2(MonoidTestpk1LegacyPerson, monoid.String),
	func(t fp.Tuple2[testpk1.LegacyPerson, string]) testpk1.LegacyPhoneBook {
		return testpk1.LegacyPhoneBook{
			Person: t.I1,
			Phone:  t.I2,
		}
	},
	func(v testpk1.LegacyPhoneBook) fp.Tuple2[testpk1.LegacyPerson, string] {
		return as.Tuple2(v.Person, v.Phone)
	},
)

var ShowTestpk1LegacyPhoneBook = show.Generic(
	as.Generic(
		"testpk1.LegacyPhoneBook",
		"Struct",
		fp.Compose(
			func(v testpk1.LegacyPhoneBook) fp.Tuple2[testpk1.LegacyPerson, string] {
				return as.Tuple2(v.Person, v.Phone)
			},
			as.HList2[testpk1.LegacyPerson, string],
		),

		fp.Compose(
			product.TupleFromHList2[testpk1.LegacyPerson, string],
			func(t fp.Tuple2[testpk1.LegacyPerson, string]) testpk1.LegacyPhoneBook {
				return testpk1.LegacyPhoneBook{
					Person: t.I1,
					Phone:  t.I2,
				}
			},
		),
	),
	show.StructHCons(
		show.Given[testpk1.LegacyPerson](),
		show.StructHCons(
			show.String,
			show.HNil,
		),
	),
)

var EncoderTestpk1LegacyPhoneBook = js.EncoderContraMap(
	js.EncoderLabelled2(js.EncoderNamed[fp.RuntimeNamed[testpk1.LegacyPerson]](js.EncoderGiven[testpk1.LegacyPerson]()), js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString)),
	func(v testpk1.LegacyPhoneBook) fp.Labelled2[fp.RuntimeNamed[testpk1.LegacyPerson], fp.RuntimeNamed[string]] {
		i0, i1 := v.Person, v.Phone
		return as.Labelled2(fp.RuntimeNamed[testpk1.LegacyPerson]{I1: "Person", I2: i0}, fp.RuntimeNamed[string]{I1: "Phone", I2: i1})
	},
)

var DecoderTestpk1LegacyPhoneBook = js.DecoderMap(
	js.DecoderLabelled2(js.DecoderNamed[fp.RuntimeNamed[testpk1.LegacyPerson]](js.DecoderGiven[testpk1.LegacyPerson]()), js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString)),
	func(t fp.Labelled2[fp.RuntimeNamed[testpk1.LegacyPerson], fp.RuntimeNamed[string]]) testpk1.LegacyPhoneBook {
		return testpk1.LegacyPhoneBook{Person: t.I1.Value(), Phone: t.I2.Value()}
	},
)

var EqLocalPhoneBook = eq.ContraMap(
	eq.Tuple3(eq.Given[LocalPerson](), eq.String, eq.Given[StringAlias]()),
	func(v LocalPhoneBook) fp.Tuple3[LocalPerson, string, StringAlias] {
		return as.Tuple3(v.Person, v.Phone, v.Alias)
	},
)

var MonoidLocalPhoneBook = monoid.IMap(
	monoid.Tuple3(MonoidLocalPerson, monoid.String, monoid.Sum[StringAlias]()),
	func(t fp.Tuple3[LocalPerson, string, StringAlias]) LocalPhoneBook {
		return LocalPhoneBook{
			Person: t.I1,
			Phone:  t.I2,
			Alias:  t.I3,
		}
	},
	func(v LocalPhoneBook) fp.Tuple3[LocalPerson, string, StringAlias] {
		return as.Tuple3(v.Person, v.Phone, v.Alias)
	},
)

var ShowLocalPhoneBook = show.Generic(
	as.Generic(
		"recursive.LocalPhoneBook",
		"Struct",
		fp.Compose(
			func(v LocalPhoneBook) fp.Tuple3[LocalPerson, string, StringAlias] {
				return as.Tuple3(v.Person, v.Phone, v.Alias)
			},
			as.HList3[LocalPerson, string, StringAlias],
		),

		fp.Compose(
			product.TupleFromHList3[LocalPerson, string, StringAlias],
			func(t fp.Tuple3[LocalPerson, string, StringAlias]) LocalPhoneBook {
				return LocalPhoneBook{
					Person: t.I1,
					Phone:  t.I2,
					Alias:  t.I3,
				}
			},
		),
	),
	show.StructHCons(
		show.Given[LocalPerson](),
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.Given[StringAlias](),
				show.HNil,
			),
		),
	),
)

var EncoderLocalPhoneBook = js.EncoderContraMap(
	js.EncoderHConsLabelled(
		js.EncoderNamed[fp.RuntimeNamed[LocalPerson]](js.EncoderGiven[LocalPerson]()),
		js.EncoderHConsLabelled(
			js.EncoderNamed[fp.RuntimeNamed[string]](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[fp.RuntimeNamed[StringAlias]](js.EncoderGiven[StringAlias]()),
				js.EncoderHNil,
			),
		),
	),
	fp.Compose(
		func(v LocalPhoneBook) fp.Labelled3[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]] {
			i0, i1, i2 := v.Person, v.Phone, v.Alias
			return as.Labelled3(fp.RuntimeNamed[LocalPerson]{I1: "Person", I2: i0}, fp.RuntimeNamed[string]{I1: "Phone", I2: i1}, fp.RuntimeNamed[StringAlias]{I1: "Alias", I2: i2})
		},
		as.HList3Labelled[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]],
	),
)

var DecoderLocalPhoneBook = js.DecoderMap(
	js.DecoderHConsLabelled(
		js.DecoderNamed[fp.RuntimeNamed[LocalPerson]](js.DecoderGiven[LocalPerson]()),
		js.DecoderHConsLabelled(
			js.DecoderNamed[fp.RuntimeNamed[string]](js.DecoderString),
			js.DecoderHConsLabelled(
				js.DecoderNamed[fp.RuntimeNamed[StringAlias]](js.DecoderGiven[StringAlias]()),
				js.DecoderHNil,
			),
		),
	),

	fp.Compose(
		product.LabelledFromHList3[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]],
		func(t fp.Labelled3[fp.RuntimeNamed[LocalPerson], fp.RuntimeNamed[string], fp.RuntimeNamed[StringAlias]]) LocalPhoneBook {
			return LocalPhoneBook{Person: t.I1.Value(), Phone: t.I2.Value(), Alias: t.I3.Value()}
		},
	),
)

var MonoidTestpk1LegacyPerson = monoid.IMap(
	monoid.Tuple2(monoid.String, monoid.Product[int]()),
	func(t fp.Tuple2[string, int]) testpk1.LegacyPerson {
		return testpk1.LegacyPerson{
			Name: t.I1,
			Age:  t.I2,
		}
	},
	func(v testpk1.LegacyPerson) fp.Tuple2[string, int] {
		return as.Tuple2(v.Name, v.Age)
	},
)

var MonoidLocalPerson = monoid.IMap(
	monoid.Tuple2(monoid.String, monoid.Product[int]()),
	func(t fp.Tuple2[string, int]) LocalPerson {
		return LocalPerson{
			Name: t.I1,
			age:  t.I2,
		}
	},
	func(v LocalPerson) fp.Tuple2[string, int] {
		return as.Tuple2(v.Name, v.age)
	},
)
