// Code generated by gombok, DO NOT EDIT.
package docexample

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hash"
	"github.com/csgura/fp/ord"
	"github.com/csgura/fp/product"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/show"
)

func EqPerson() fp.Eq[Person] {
	return eq.ContraMap(
		eq.Tuple2(eq.String, eq.Given[int]()),
		Person.AsTuple,
	)
}

func HashablePerson() fp.Hashable[Person] {
	return hash.ContraMap(
		hash.Tuple2(hash.String, hash.Number[int]()),
		Person.AsTuple,
	)
}

func EqCar() fp.Eq[Car] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.String, eq.Given[int]()),
		Car.AsTuple,
	)
}

func OrdCar() fp.Ord[Car] {
	return ord.ContraMap(
		ord.Tuple3(ord.Given[string](), ord.Given[string](), ord.Given[int]()),
		Car.AsTuple,
	)
}

func EqCarsOwned() fp.Eq[CarsOwned] {
	return eq.ContraMap(
		eq.Tuple2(EqPerson(), EqSortSeq(EqCar(), OrdCar())),
		CarsOwned.AsTuple,
	)
}

func ShowAddress() fp.Show[Address] {
	return show.Generic(
		as.Generic(
			"docexample.Address",
			"Struct",
			fp.Compose(
				Address.AsTuple,
				as.HList3,
			),

			fp.Compose(
				product.TupleFromHList3,
				fp.Compose(
					as.Curried2(AddressBuilder.FromTuple)(AddressBuilder{}),
					AddressBuilder.Build,
				),
			),
		),
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.String,
				show.StructHCons(
					show.String,
					show.HNil,
				),
			),
		),
	)
}

func EncoderCar() js.Encoder[Car] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[NamedCompany[string], string](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NamedModel[string], string](js.EncoderString),
				js.EncoderHConsLabelled(
					js.EncoderNamed[NamedYear[int], int](js.EncoderNumber[int]()),
					js.EncoderHNil,
				),
			),
		),
		fp.Compose(
			Car.AsLabelled,
			as.HList3Labelled,
		),
	)
}
