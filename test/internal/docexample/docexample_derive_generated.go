// Code generated by gombok, DO NOT EDIT.
package docexample

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/eq"
	"github.com/csgura/fp/hash"
	"github.com/csgura/fp/hlist"
	"github.com/csgura/fp/ord"
	"github.com/csgura/fp/test/internal/js"
	"github.com/csgura/fp/test/internal/show"
)

func EqPerson() fp.Eq[Person] {
	return eq.ContraMap(
		eq.Tuple2(eq.String, eq.Given[int]()),
		Person.AsTuple,
	)
}

func HashablePerson() fp.Hashable[Person] {
	return hash.ContraMap(
		hash.Tuple2(hash.String, hash.Number[int]()),
		Person.AsTuple,
	)
}

func EqCar() fp.Eq[Car] {
	return eq.ContraMap(
		eq.Tuple3(eq.String, eq.String, eq.Given[int]()),
		Car.AsTuple,
	)
}

func OrdCar() fp.Ord[Car] {
	return ord.ContraMap(
		ord.Tuple3(ord.Given[string](), ord.Given[string](), ord.Given[int]()),
		Car.AsTuple,
	)
}

func EqCarsOwned() fp.Eq[CarsOwned] {
	return eq.ContraMap(
		eq.Tuple2(EqPerson(), EqSortSeq(EqCar(), OrdCar())),
		CarsOwned.AsTuple,
	)
}

func ShowAddress() fp.Show[Address] {
	return show.Generic(
		fp.Generic[Address, hlist.Cons[string, hlist.Cons[string, hlist.Cons[string, hlist.Nil]]]]{
			Type: "docexample.Address",
			Kind: "Struct",
			To: func(v Address) hlist.Cons[string, hlist.Cons[string, hlist.Cons[string, hlist.Nil]]] {
				i0, i1, i2 := v.Unapply()
				h3 := hlist.Empty()
				h2 := hlist.Concat(i2, h3)
				h1 := hlist.Concat(i1, h2)
				h0 := hlist.Concat(i0, h1)
				return h0
			},
			From: func(hl0 hlist.Cons[string, hlist.Cons[string, hlist.Cons[string, hlist.Nil]]]) Address {
				i0, hl1 := hlist.Unapply(hl0)
				i1, hl2 := hlist.Unapply(hl1)
				i2 := hlist.Head(hl2)
				return AddressBuilder{}.Apply(i0, i1, i2).Build()
			},
		},
		show.StructHCons(
			show.String,
			show.StructHCons(
				show.String,
				show.StructHCons(
					show.String,
					show.HNil,
				),
			),
		),
	)
}

func EncoderCar() js.Encoder[Car] {
	return js.EncoderContraMap(
		js.EncoderHConsLabelled(
			js.EncoderNamed[NamedCompanyOfCar](js.EncoderString),
			js.EncoderHConsLabelled(
				js.EncoderNamed[NamedModelOfCar](js.EncoderString),
				js.EncoderHConsLabelled(
					js.EncoderNamed[NamedYearOfCar](js.EncoderNumber[int]()),
					js.EncoderHNil,
				),
			),
		),
		func(v Car) hlist.Cons[NamedCompanyOfCar, hlist.Cons[NamedModelOfCar, hlist.Cons[NamedYearOfCar, hlist.Nil]]] {
			i0, i1, i2 := v.Unapply()
			return hlist.Concat(NamedCompanyOfCar{i0},
				hlist.Concat(NamedModelOfCar{i1},
					hlist.Concat(NamedYearOfCar{i2},
						hlist.Empty(),
					),
				),
			)
		},
	)
}
