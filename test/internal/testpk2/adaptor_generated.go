// Code generated by gombok, DO NOT EDIT.
package testpk2

import (
	"github.com/csgura/fp"
	"github.com/csgura/fp/test/internal/testpk1"
	ftry "github.com/csgura/fp/try"
	"io"
	"time"
)

type APIAdaptor struct {
	IsActive     func() bool
	DefaultHello string
	GetIsOk      func() bool
	OnReceive    func(msg string)
	DoSend       func(target string) fp.Try[string]
	DoTestZero   func() (complex64, time.Time, *string, []int, [3]byte, map[string]any)
	DoWrite      func(w io.Writer, b []byte) (int, error)
}

func (r *APIAdaptor) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	panic("not implemented")
}

func (r *APIAdaptor) Hello() string {
	if r.DefaultHello != "" {
		return r.DefaultHello
	}

	panic("not implemented")
}

func (r *APIAdaptor) IsOk() bool {

	if r.GetIsOk != nil {
		return r.GetIsOk()
	}

	panic("not implemented")
}

func (r *APIAdaptor) Receive(msg string) {

	if r.OnReceive != nil {
		r.OnReceive(msg)
		return
	}

	return
}

func (r *APIAdaptor) Send(target string) fp.Try[string] {

	if r.DoSend != nil {
		return r.DoSend(target)
	}

	return ftry.Success("hello")
}

func (r *APIAdaptor) TestZero() (complex64, time.Time, *string, []int, [3]byte, map[string]any) {

	if r.DoTestZero != nil {
		return r.DoTestZero()
	}

	return 0, time.Time{}, nil, nil, [3]byte{}, map[string]any{}
}

func (r *APIAdaptor) Write(w io.Writer, b []byte) (int, error) {

	if r.DoWrite != nil {
		return r.DoWrite(w, b)
	}

	return defaultWrite(r, w, b)
}

type APIAdaptorExtends struct {
	Extends      AdaptorAPI
	IsActive     func(self AdaptorAPI) bool
	DefaultHello string
	GetIsOk      func(self AdaptorAPI) bool
	OnReceive    func(self AdaptorAPI, msg string)
	DoSend       func(self AdaptorAPI, target string) fp.Try[string]
	DoTestZero   func(self AdaptorAPI) (complex64, time.Time, *string, []int, [3]byte, map[string]any)
	DoWrite      func(self AdaptorAPI, w io.Writer, b []byte) (int, error)
}

func (r *APIAdaptorExtends) Active() bool {
	return r.ActiveImpl(r)
}

func (r *APIAdaptorExtends) ActiveImpl(self AdaptorAPI) bool {

	if r.IsActive != nil {
		return r.IsActive(self)
	}

	if r.Extends != nil {
		type impl interface {
			ActiveImpl(self AdaptorAPI) bool
		}

		if super, ok := r.Extends.(impl); ok {
			return super.ActiveImpl(self)
		}
		return r.Extends.Active()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtends) Hello() string {
	return r.HelloImpl(r)
}

func (r *APIAdaptorExtends) HelloImpl(self AdaptorAPI) string {
	if r.DefaultHello != "" {
		return r.DefaultHello
	}

	if r.Extends != nil {
		type impl interface {
			HelloImpl(self AdaptorAPI) string
		}

		if super, ok := r.Extends.(impl); ok {
			return super.HelloImpl(self)
		}
		return r.Extends.Hello()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtends) IsOk() bool {
	return r.IsOkImpl(r)
}

func (r *APIAdaptorExtends) IsOkImpl(self AdaptorAPI) bool {

	if r.GetIsOk != nil {
		return r.GetIsOk(self)
	}

	if r.Extends != nil {
		type impl interface {
			IsOkImpl(self AdaptorAPI) bool
		}

		if super, ok := r.Extends.(impl); ok {
			return super.IsOkImpl(self)
		}
		return r.Extends.IsOk()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtends) Receive(msg string) {
	r.ReceiveImpl(r, msg)
	return
}

func (r *APIAdaptorExtends) ReceiveImpl(self AdaptorAPI, msg string) {

	if r.OnReceive != nil {
		r.OnReceive(self, msg)
		return
	}

	if r.Extends != nil {
		type impl interface {
			ReceiveImpl(self AdaptorAPI, msg string)
		}

		if super, ok := r.Extends.(impl); ok {
			super.ReceiveImpl(self, msg)
			return
		}
		r.Extends.Receive(msg)
		return
	}

	return
}

func (r *APIAdaptorExtends) Send(target string) fp.Try[string] {
	return r.SendImpl(r, target)
}

func (r *APIAdaptorExtends) SendImpl(self AdaptorAPI, target string) fp.Try[string] {

	if r.DoSend != nil {
		return r.DoSend(self, target)
	}

	if r.Extends != nil {
		type impl interface {
			SendImpl(self AdaptorAPI, target string) fp.Try[string]
		}

		if super, ok := r.Extends.(impl); ok {
			return super.SendImpl(self, target)
		}
		return r.Extends.Send(target)
	}

	panic("not implemented")
}

func (r *APIAdaptorExtends) TestZero() (complex64, time.Time, *string, []int, [3]byte, map[string]any) {
	return r.TestZeroImpl(r)
}

func (r *APIAdaptorExtends) TestZeroImpl(self AdaptorAPI) (complex64, time.Time, *string, []int, [3]byte, map[string]any) {

	if r.DoTestZero != nil {
		return r.DoTestZero(self)
	}

	if r.Extends != nil {
		type impl interface {
			TestZeroImpl(self AdaptorAPI) (complex64, time.Time, *string, []int, [3]byte, map[string]any)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.TestZeroImpl(self)
		}
		return r.Extends.TestZero()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtends) Write(w io.Writer, b []byte) (int, error) {
	return r.WriteImpl(r, w, b)
}

func (r *APIAdaptorExtends) WriteImpl(self AdaptorAPI, w io.Writer, b []byte) (int, error) {

	if r.DoWrite != nil {
		return r.DoWrite(self, w, b)
	}

	if r.Extends != nil {
		type impl interface {
			WriteImpl(self AdaptorAPI, w io.Writer, b []byte) (int, error)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.WriteImpl(self, w, b)
		}
		return r.Extends.Write(w, b)
	}

	return defaultWrite(self, w, b)
}

type APIAdaptorExtendsNotSelf struct {
	Extends      AdaptorAPI
	IsActive     func() bool
	DefaultHello string
	GetHello     func() string
	GetIsOk      func() bool
	OnReceive    func(msg string)
	DoSend       func(target string) fp.Try[string]
	DoTestZero   func() (complex64, time.Time, *string, []int, [3]byte, map[string]any)
	DoWrite      func(w io.Writer, b []byte) (int, error)
}

func (r *APIAdaptorExtendsNotSelf) Active() bool {

	if r.IsActive != nil {
		return r.IsActive()
	}

	if r.Extends != nil {
		return r.Extends.Active()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtendsNotSelf) Hello() string {
	if r.DefaultHello != "" {
		return r.DefaultHello
	}

	if r.GetHello != nil {
		return r.GetHello()
	}

	if r.Extends != nil {
		return r.Extends.Hello()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtendsNotSelf) IsOk() bool {

	if r.GetIsOk != nil {
		return r.GetIsOk()
	}

	if r.Extends != nil {
		return r.Extends.IsOk()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtendsNotSelf) Receive(msg string) {

	if r.OnReceive != nil {
		r.OnReceive(msg)
		return
	}

	if r.Extends != nil {
		r.Extends.Receive(msg)
		return
	}

	return
}

func (r *APIAdaptorExtendsNotSelf) Send(target string) fp.Try[string] {

	if r.DoSend != nil {
		return r.DoSend(target)
	}

	if r.Extends != nil {
		return r.Extends.Send(target)
	}

	panic("not implemented")
}

func (r *APIAdaptorExtendsNotSelf) TestZero() (complex64, time.Time, *string, []int, [3]byte, map[string]any) {

	if r.DoTestZero != nil {
		return r.DoTestZero()
	}

	if r.Extends != nil {
		return r.Extends.TestZero()
	}

	panic("not implemented")
}

func (r *APIAdaptorExtendsNotSelf) Write(w io.Writer, b []byte) (int, error) {

	if r.DoWrite != nil {
		return r.DoWrite(w, b)
	}

	if r.Extends != nil {
		return r.Extends.Write(w, b)
	}

	return defaultWrite(r, w, b)
}

type AdTesterAdaptor struct {
	Extends testpk1.AdTester
	DoWrite func(self testpk1.AdTester, w io.Writer, b []byte) (int, error)
}

func (r *AdTesterAdaptor) Write(w io.Writer, b []byte) (int, error) {
	return r.WriteImpl(r, w, b)
}

func (r *AdTesterAdaptor) WriteImpl(self testpk1.AdTester, w io.Writer, b []byte) (int, error) {

	if r.DoWrite != nil {
		return r.DoWrite(self, w, b)
	}

	if r.Extends != nil {
		type impl interface {
			WriteImpl(self testpk1.AdTester, w io.Writer, b []byte) (int, error)
		}

		if super, ok := r.Extends.(impl); ok {
			return super.WriteImpl(self, w, b)
		}
		return r.Extends.Write(w, b)
	}

	return testpk1.DefaultWrite(b)
}
