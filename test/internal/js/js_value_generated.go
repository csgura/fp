// Code generated by gombok, DO NOT EDIT.
package js

import (
	"encoding/json"
	"fmt"
	"github.com/csgura/fp"
	"github.com/csgura/fp/as"
	"github.com/csgura/fp/option"
)

type DecoderContextMutable struct {
	WorkingObject fp.Option[map[string]json.RawMessage]
}

func (r DecoderContext) WorkingObject() fp.Option[map[string]json.RawMessage] {
	return r.workingObject
}

func (r DecoderContext) WithWorkingObject(v fp.Option[map[string]json.RawMessage]) DecoderContext {
	r.workingObject = v
	return r
}

func (r DecoderContext) WithSomeWorkingObject(v map[string]json.RawMessage) DecoderContext {
	r.workingObject = option.Some(v)
	return r
}

func (r DecoderContext) WithNoneWorkingObject() DecoderContext {
	r.workingObject = option.None[map[string]json.RawMessage]()
	return r
}

type DecoderContextBuilder DecoderContext

func (r DecoderContextBuilder) Build() DecoderContext {
	return DecoderContext(r)
}

func (r DecoderContext) Builder() DecoderContextBuilder {
	return DecoderContextBuilder(r)
}

func (r DecoderContextBuilder) WorkingObject(v fp.Option[map[string]json.RawMessage]) DecoderContextBuilder {
	r.workingObject = v
	return r
}

func (r DecoderContextBuilder) SomeWorkingObject(v map[string]json.RawMessage) DecoderContextBuilder {
	r.workingObject = option.Some(v)
	return r
}

func (r DecoderContextBuilder) NoneWorkingObject() DecoderContextBuilder {
	r.workingObject = option.None[map[string]json.RawMessage]()
	return r
}

func (r DecoderContextBuilder) FromTuple(t fp.Tuple1[fp.Option[map[string]json.RawMessage]]) DecoderContextBuilder {
	r.workingObject = t.I1
	return r
}

func (r DecoderContextBuilder) Apply(workingObject fp.Option[map[string]json.RawMessage]) DecoderContextBuilder {
	r.workingObject = workingObject
	return r
}

func (r DecoderContextBuilder) FromMap(m map[string]any) DecoderContextBuilder {

	if v, ok := m["workingObject"].(fp.Option[map[string]json.RawMessage]); ok {
		r.workingObject = v
	} else if v, ok := m["workingObject"].(map[string]json.RawMessage); ok {
		r.workingObject = option.Some(v)
	}

	return r
}

func (r DecoderContext) String() string {
	return fmt.Sprintf("DecoderContext(workingObject=%v)", r.workingObject)
}

func (r DecoderContext) AsTuple() fp.Tuple1[fp.Option[map[string]json.RawMessage]] {
	return as.Tuple1(r.workingObject)
}

func (r DecoderContext) Unapply() fp.Option[map[string]json.RawMessage] {
	return r.workingObject
}

func (r DecoderContext) AsMutable() DecoderContextMutable {
	return DecoderContextMutable{
		WorkingObject: r.workingObject,
	}
}

func (r DecoderContextMutable) AsImmutable() DecoderContext {
	return DecoderContext{
		workingObject: r.WorkingObject,
	}
}

func (r DecoderContext) AsMap() map[string]any {
	m := map[string]any{}
	if r.workingObject.IsDefined() {
		m["workingObject"] = r.workingObject.Get()
	}
	return m
}
